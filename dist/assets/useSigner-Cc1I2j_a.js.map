{"version":3,"file":"useSigner-Cc1I2j_a.js","sources":["../../../hooks/src/useSigner.ts"],"sourcesContent":["import { useSdk } from '@cetus/sdk-factory'\nimport { useAccountStore } from '@cetus/stores'\nimport envConfigs from '@cetus/types/src/config/envConfigs'\nimport { useSignAndExecuteTransaction, useSignPersonalMessage, useSignTransaction } from '@mysten/dapp-kit'\nimport { SuiTransactionBlockResponse } from '@mysten/sui/client'\nimport { Transaction } from '@mysten/sui/transactions'\nimport { fromBase64 } from '@mysten/sui/utils'\nimport { SignedTransaction } from '@mysten/wallet-standard'\nimport { useMemo } from 'react'\n\nexport function useSigner() {\n  const clmmSdk = useSdk('clmm')\n  const { currentAccount } = useAccountStore()\n  const { mutateAsync: signTransaction } = useSignTransaction()\n  const { mutate: signPersonalMessage } = useSignPersonalMessage()\n  const { mutate: signAndExecuteTransaction } = useSignAndExecuteTransaction({\n    execute: async ({ bytes, signature }) => await executeTransactionBlock(bytes, signature)\n  })\n\n  const chain = useMemo(() => {\n    return envConfigs.env === 'mainnet' ? 'sui:mainnet' : 'sui:testnet'\n  }, [currentAccount])\n\n  /**\n   * ÊâßË°å‰∫§Êòì\n   * @param sdk\n   * @param rawBytes\n   * @param signature\n   * @returns\n   */\n  const executeTransactionBlock = async (\n    rawBytes: string,\n    signature: string | string[],\n    useDevInspect = false\n  ): Promise<SuiTransactionBlockResponse> => {\n    if (useDevInspect) {\n      const res = await clmmSdk!.FullClient.devInspectTransactionBlock({\n        transactionBlock: Transaction.from(fromBase64(rawBytes)),\n        sender: currentAccount!.address\n      })\n\n      console.log('devInspectTransactionBlock:', res)\n\n      if (!res || res.effects?.status.status === 'failure') {\n        throw Error(res.effects?.status.error)\n      }\n    }\n\n    const result = await clmmSdk!.FullClient.executeTransactionBlock({\n      transactionBlock: rawBytes,\n      signature,\n      options: {\n        showEvents: true,\n        showRawEffects: true,\n        showEffects: true,\n        showBalanceChanges: true,\n        showObjectChanges: true,\n        showInput: true\n      }\n    })\n\n    return result\n  }\n\n  /**\n   * Âè™Á≠æÂêçÔºå‰∏çÂèëÈÄÅ‰∫§Êòì\n   * @param transactionBlock\n   * @returns\n   */\n\n  const signTransactionBlock = async (transactionBlock: Uint8Array | Transaction | string): Promise<SignedTransaction> => {\n    console.log('üöÄüöÄüöÄ ~ file: useSigner.ts:74 ~ signTransactionBlock ~ transactionBlock:', transactionBlock instanceof Uint8Array, transactionBlock)\n    if (transactionBlock instanceof Uint8Array) {\n      transactionBlock = Transaction.from(transactionBlock)\n    }\n\n    if (typeof transactionBlock === 'string') {\n      transactionBlock = Transaction.from(fromBase64(transactionBlock))\n    }\n    console.log('üöÄ ~ file: useSigner.ts:105 ~ signTransactionBlock ~ transactionBlock:', {\n      transactionBlock,\n      chain\n    })\n\n    return new Promise((resolve, reject) => {\n      signTransaction(\n        {\n          transaction: transactionBlock as Transaction,\n          chain\n        },\n        {\n          onSuccess: result => {\n            console.log('signTransactionBlock result', result)\n            resolve(result)\n          },\n          onError: error => {\n            console.error('signTransactionBlock failed', error)\n            reject(error)\n          },\n          onSettled: (data: any, error: any, variables: any, context: any) => {\n            // console.error('signTransactionBlock onSettled', {\n            //   data,\n            //   error,\n            //   variables\n            // })\n          }\n        }\n      )\n    })\n  }\n\n  /**\n   *\n   * @param tx\n   * @returns\n   */\n  const signAndExecuteTransactionBlock = async (transactionBlock: Transaction, useDevInspect = false): Promise<SuiTransactionBlockResponse> => {\n    let tx: Transaction\n\n    if (typeof transactionBlock === 'string') {\n      tx = Transaction.from(transactionBlock)\n    } else {\n      tx = transactionBlock\n    }\n    console.log('chain: ', {\n      chain,\n      transactionBlock\n    })\n\n    if (useDevInspect) {\n      const res = await clmmSdk!.FullClient.devInspectTransactionBlock({\n        transactionBlock,\n        sender: currentAccount!.address\n      })\n\n      console.log('devInspectTransactionBlock:', res)\n\n      if (!res || res.effects?.status.status === 'failure') {\n        throw Error(res.effects?.status.error)\n      }\n    }\n    // TODO ÊµãËØïcetus pumpÊó∂  Âú®‰∏ªÁΩë ËøÅÁßªÁöÑtx ÈúÄË¶ÅËÆæÁΩÆsetGasBudget Èí±ÂåÖÊâçËÉΩÈ¢ÑËÆ°ÁÆóÈÄöËøáÔºå‰∏¥Êó∂ÂÜôÊ≠ª‰∏Ä‰∏™ÂÄºÔºü\n    tx.setGasBudget(100000000)\n    console.log('üöÄ ~ file: useSigner.ts:71 ~ signTransactionBlock ~ transactionBlock:', transactionBlock)\n    return new Promise((resolve, reject) => {\n      signAndExecuteTransaction(\n        {\n          transaction: tx,\n          chain\n        },\n        {\n          onSuccess: result => {\n            console.log(' signAndExecuteTransactionBlock  executed transaction', result)\n            resolve(result)\n          },\n          onError: error => {\n            console.error('signAndExecuteTransactionBlock transaction failed', error)\n            reject(error)\n          }\n        }\n      )\n    })\n  }\n\n  // notifiÁ≠æÂêç‰ΩøÁî®\n  const signUserMessage = async (message: Uint8Array): Promise<any> => {\n    console.log('üöÄüöÄüöÄ ~ useSigner.ts:167 ~ signUserMessage ~ message:', message)\n    console.log('üöÄüöÄüöÄ ~ useSigner.ts:167 ~ returnnewPromise ~ currentAccount:', currentAccount)\n    return new Promise((resolve, reject) => {\n      signPersonalMessage(\n        {\n          message\n        },\n        {\n          onSuccess: result => {\n            console.log('signUserMessage result', result)\n            resolve(result)\n          },\n          onError: error => {\n            console.error('signUserMessage failed', error)\n            reject(error)\n          },\n          onSettled: (data: any, error: any, variables: any, context: any) => {\n            // console.error('signUserMessage onSettled', {\n            //   data,\n            //   error,\n            //   variables\n            // })\n          }\n        }\n      )\n    })\n  }\n\n  return {\n    signAndExecuteTransactionBlock,\n    signTransactionBlock,\n    executeTransactionBlock,\n    signUserMessage\n  }\n}\n"],"names":["useSigner","clmmSdk","useSdk","currentAccount","useAccountStore","signTransaction","useSignTransaction","signPersonalMessage","useSignPersonalMessage","signAndExecuteTransaction","useSignAndExecuteTransaction","bytes","signature","executeTransactionBlock","chain","useMemo","envConfigs","rawBytes","useDevInspect","res","Transaction","fromBase64","_a","_b","transactionBlock","tx","resolve","reject","result","error","data","variables","context","message"],"mappings":"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"}