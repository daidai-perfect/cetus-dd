{"version":3,"file":"useNotifiAlerts-CDazS4xv.js","sources":["../../../cetus-design/src/hook/useNotifi/useGetNotifiTargetGroups.ts","../../../cetus-design/src/hook/useNotifi/useNotifiAlerts.ts"],"sourcesContent":["import useNotifiStore from '@cetus/stores/src/notifi'\nimport { Types } from '@notifi-network/notifi-graphql'\n\nexport default function useGetNotifiTargetGroups() {\n  const { notifiClient } = useNotifiStore()\n  const { setDefaultTargetGroup, setEmailTarget, setTelegramTarget, setSmsTarget, setNotifiLoginLoading } = useNotifiStore()\n\n  // 通用的设置目标信息函数\n  const setTargetGroupInfo = (targetGroup: Types.TargetGroupFragmentFragment) => {\n    if (targetGroup.emailTargets && targetGroup.emailTargets.length > 0) {\n      setEmailTarget(targetGroup.emailTargets.slice(-1)[0])\n    }\n    if (targetGroup.telegramTargets && targetGroup?.telegramTargets.length > 0) {\n      setTelegramTarget(targetGroup.telegramTargets.slice(-1)[0])\n    }\n    if (targetGroup.smsTargets && targetGroup?.smsTargets.length > 0) {\n      setSmsTarget(targetGroup.smsTargets.slice(-1)[0])\n    }\n  }\n\n  const getNotifiTargetGroups = async (client?: any) => {\n    try {\n      const targetGroup = client ? await client.getTargetGroups() : await notifiClient.getTargetGroups()\n      console.log('🚀🚀🚀 ~ useGetNotifiTargetGroups.ts:8 ~ getNotifiTargetGroups ~ targetGroup:', targetGroup)\n\n      if (targetGroup?.length > 0) {\n        const firstTargetGroup = targetGroup[0]\n        console.log('🚀🚀🚀 ~ First target group:', firstTargetGroup)\n\n        setTargetGroupInfo(firstTargetGroup)\n      }\n\n      setDefaultTargetGroup(targetGroup)\n      return targetGroup\n    } catch (error) {\n      console.error('🚀🚀🚀 ~ useGetNotifiTargetGroups.ts:20 ~ getNotifiTargetGroups ~ error:', error)\n      return {}\n    }\n  }\n\n  const ensureTargetGroup = async (ensureTargetGroupParams: { emailAddress?: string; phoneNumber?: string; telegramId?: string }) => {\n    try {\n      setNotifiLoginLoading(true)\n\n      const params = { ...ensureTargetGroupParams }\n\n      const defaultTargetGroup: Types.TargetGroupFragmentFragment = await notifiClient.ensureTargetGroup({ name: 'Default', ...params })\n      if (defaultTargetGroup?.id) {\n        setTargetGroupInfo(defaultTargetGroup)\n      }\n\n      setDefaultTargetGroup([defaultTargetGroup])\n      setNotifiLoginLoading(false)\n    } catch (error) {\n      setNotifiLoginLoading(false)\n      console.error('🚀🚀🚀 ~ useGetNotifiTargetGroups.ts:45 ~ ensureTargetGroup ~ error:', error)\n    }\n  }\n\n  return { getNotifiTargetGroups, ensureTargetGroup }\n}\n","import useNotifiStore from '@cetus/stores/src/notifi'\nimport { useGlobalToast } from '../../hooks'\nimport useGetNotifiTargetGroups from './useGetNotifiTargetGroups'\n\nexport default function useNotifiAlert() {\n  const { notifiClient } = useNotifiStore()\n  const { defaultTargetGroup, setNotifiAlerts, setNotifiSourceGroups, setNotifiSources, setIsChecked, setNotifiSubscriptionLoading } =\n    useNotifiStore()\n  const { showCommonToast } = useGlobalToast()\n  const { getNotifiTargetGroups } = useGetNotifiTargetGroups()\n\n  // 公共函数：获取默认目标组\n  const getDefaultTargetGroup = async (client?: any) => {\n    let targetGroup = defaultTargetGroup.filter(item => item.name === 'Default')\n    if (!targetGroup.length) {\n      targetGroup = (await getNotifiTargetGroups(client)).filter((item: any) => item.name === 'Default')\n    }\n    return targetGroup[0]\n  }\n\n  // 处理通知目标\n  const handleAlertSource = (alerts, client) => {\n    console.log('🚀🚀🚀 ~ useNotifiAlerts.ts:18 ~ useNotifiAlert ~ alerts:', alerts)\n\n    const sourceGroup = []\n    const sources = []\n    const allSource = []\n\n    alerts.forEach(alert => {\n      console.log('🚀🚀🚀 ~ useNotifiAlerts.ts:41 ~ useNotifiAlert ~ alert:', alert.subscriptionValue)\n      const subscriptionValueResult =\n        alert?.subscriptionValue !== null && alert?.subscriptionValue !== '*' ? JSON.parse(alert?.subscriptionValue) : null\n      if (\n        (alert?.sourceGroup?.name?.includes('position') || alert.name.includes('Position Range Alerts')) &&\n        alert.name !== 'Fusion Source Filter' &&\n        alert.name !== 'defaultAlert'\n      ) {\n        sourceGroup.push(alert?.sourceGroup)\n        if (subscriptionValueResult !== null) {\n          sources.push({ ...subscriptionValueResult, alertID: alert.id, alertName: alert.name })\n        }\n      }\n      allSource.push({ ...subscriptionValueResult, alertID: alert.id, alertName: alert.name })\n    })\n    console.log('🚀🚀🚀 ~ useNotifiAlerts.ts:38 ~ useNotifiAlert ~ allSource:', allSource)\n\n    const hasDefaultSource = allSource.some(item => item.alertName === 'defaultAlert')\n    console.log('🚀🚀🚀 ~ useNotifiAlerts.ts:51 ~ handleAlertSource ~ hasDefaultSource:', hasDefaultSource)\n    if (!hasDefaultSource) {\n      initDefaultAlert(client)\n    }\n\n    return { sourceGroup, sources }\n  }\n\n  const getNotifiAlerts = async (client?: any) => {\n    try {\n      const alerts = client ? await client.getAlerts() : await notifiClient.getAlerts()\n      console.log('🚀 ~ getNotifiAlerts ~ alerts:', alerts)\n\n      const { sourceGroup, sources } = handleAlertSource(alerts, client ? client : notifiClient)\n      setNotifiAlerts(alerts)\n      setNotifiSourceGroups(sourceGroup)\n      setNotifiSources(sources)\n      setNotifiSubscriptionLoading(false)\n    } catch (error) {\n      console.error('🚀 ~ getNotifiAlerts ~ error:', error)\n    }\n  }\n\n  const deleteNotifiAlerts = async (id: string) => {\n    console.log('🚀 ~ deleteNotifiAlerts ~ id:', id)\n    try {\n      await notifiClient.deleteAlert({ id })\n      showCommonToast('Unsubscribed', 'success', \"You'll no longer receive alerts when the price goes out of range.\")\n      getNotifiAlerts()\n      setNotifiSubscriptionLoading(false)\n    } catch (error) {\n      console.error('🚀 ~ deleteNotifiAlerts ~ error:', error)\n      showCommonToast('There was an error unsubscribe alert', 'rejected', String(error))\n      setNotifiSubscriptionLoading(false)\n    }\n  }\n\n  const createNotifiAlert = async (posID?: string, posIndex?: string) => {\n    try {\n      const targetGroup = await getDefaultTargetGroup()\n      const createAlertInputs = {\n        alerts: [\n          {\n            fusionEventId: '0192d2ba2cc371e5b6583e43295a3272',\n            name: posID && posIndex ? `Position Range Alerts${new Date().getTime()}` : 'defaultAlert',\n            targetGroupId: targetGroup.id,\n            subscriptionValue: posID && posIndex ? JSON.stringify({ pool_address: posID, position_index: String(posIndex) }) : '*',\n            filterOptions: JSON.stringify('{\"version\":1,\"input\":{}}')\n          }\n        ]\n      }\n      const alerts = await notifiClient.ensureFusionAlerts(createAlertInputs)\n      console.log('🚀 ~ createNotifiAlert ~ alerts:', alerts)\n\n      showCommonToast(\n        'Subscribed to Alerts!',\n        'success',\n        'Verify your notification channels to receive alerts when the price goes out of range. To edit your alert settings, click the bell icon in the top nav.'\n      )\n      getNotifiAlerts()\n      // setIsChecked(false)\n    } catch (error) {\n      console.error('🚀 ~ createNotifiAlert ~ error:', error)\n      showCommonToast('There was an error subscribe alert', 'rejected', String(error))\n      setIsChecked(false)\n      setNotifiSubscriptionLoading(false)\n    }\n  }\n\n  const initDefaultAlert = async (client?: any) => {\n    try {\n      const targetGroup = await getDefaultTargetGroup(client)\n      const createAlertInputs = {\n        alerts: [\n          {\n            fusionEventId: '0192d2ba2cc371e5b6583e43295a3272',\n            name: 'defaultAlert',\n            targetGroupId: targetGroup.id,\n            subscriptionValue: '*',\n            filterOptions: JSON.stringify('{\"version\":1,\"input\":{}}')\n          }\n        ]\n      }\n      await client.ensureFusionAlerts(createAlertInputs)\n      getNotifiAlerts()\n    } catch (error) {\n      console.error('🚀 ~ initDefaultAlert ~ error:', error)\n    }\n  }\n\n  return { getNotifiAlerts, createNotifiAlert, deleteNotifiAlerts }\n}\n"],"names":["useGetNotifiTargetGroups","notifiClient","useNotifiStore","setDefaultTargetGroup","setEmailTarget","setTelegramTarget","setSmsTarget","setNotifiLoginLoading","setTargetGroupInfo","targetGroup","client","firstTargetGroup","error","ensureTargetGroupParams","params","defaultTargetGroup","useNotifiAlert","setNotifiAlerts","setNotifiSourceGroups","setNotifiSources","setIsChecked","setNotifiSubscriptionLoading","showCommonToast","useGlobalToast","getNotifiTargetGroups","getDefaultTargetGroup","item","handleAlertSource","alerts","sourceGroup","sources","allSource","alert","subscriptionValueResult","_b","_a","hasDefaultSource","initDefaultAlert","getNotifiAlerts","deleteNotifiAlerts","id","createNotifiAlert","posID","posIndex","createAlertInputs"],"mappings":"4EAGA,SAAwBA,GAA2B,CAC3C,KAAA,CAAE,aAAAC,CAAa,EAAIC,EAAe,EAClC,CAAE,sBAAAC,EAAuB,eAAAC,EAAgB,kBAAAC,EAAmB,aAAAC,EAAc,sBAAAC,GAA0BL,EAAe,EAGnHM,EAAsBC,GAAmD,CACzEA,EAAY,cAAgBA,EAAY,aAAa,OAAS,GAChEL,EAAeK,EAAY,aAAa,MAAM,EAAE,EAAE,CAAC,CAAC,EAElDA,EAAY,kBAAmBA,GAAA,YAAAA,EAAa,gBAAgB,QAAS,GACvEJ,EAAkBI,EAAY,gBAAgB,MAAM,EAAE,EAAE,CAAC,CAAC,EAExDA,EAAY,aAAcA,GAAA,YAAAA,EAAa,WAAW,QAAS,GAC7DH,EAAaG,EAAY,WAAW,MAAM,EAAE,EAAE,CAAC,CAAC,CAEpD,EAyCO,MAAA,CAAE,sBAvCqB,MAAOC,GAAiB,CAChD,GAAA,CACI,MAAAD,EAAcC,EAAS,MAAMA,EAAO,kBAAoB,MAAMT,EAAa,gBAAgB,EAG7F,GAFI,QAAA,IAAI,gFAAiFQ,CAAW,GAEpGA,GAAA,YAAAA,EAAa,QAAS,EAAG,CACrB,MAAAE,EAAmBF,EAAY,CAAC,EAC9B,QAAA,IAAI,+BAAgCE,CAAgB,EAE5DH,EAAmBG,CAAgB,CAAA,CAGrC,OAAAR,EAAsBM,CAAW,EAC1BA,QACAG,EAAO,CACN,eAAA,MAAM,2EAA4EA,CAAK,EACxF,CAAC,CAAA,CAEZ,EAqBgC,kBAnBN,MAAOC,GAAkG,CAC7H,GAAA,CACFN,EAAsB,EAAI,EAEpB,MAAAO,EAAS,CAAE,GAAGD,CAAwB,EAEtCE,EAAwD,MAAMd,EAAa,kBAAkB,CAAE,KAAM,UAAW,GAAGa,EAAQ,EAC7HC,GAAA,MAAAA,EAAoB,IACtBP,EAAmBO,CAAkB,EAGjBZ,EAAA,CAACY,CAAkB,CAAC,EAC1CR,EAAsB,EAAK,QACpBK,EAAO,CACdL,EAAsB,EAAK,EACnB,QAAA,MAAM,uEAAwEK,CAAK,CAAA,CAE/F,CAEkD,CACpD,CCxDA,SAAwBI,GAAiB,CACjC,KAAA,CAAE,aAAAf,CAAa,EAAIC,EAAe,EAClC,CAAE,mBAAAa,EAAoB,gBAAAE,EAAiB,sBAAAC,EAAuB,iBAAAC,EAAkB,aAAAC,EAAc,6BAAAC,GAClGnB,EAAe,EACX,CAAE,gBAAAoB,CAAgB,EAAIC,EAAe,EACrC,CAAE,sBAAAC,CAAsB,EAAIxB,EAAyB,EAGrDyB,EAAwB,MAAOf,GAAiB,CACpD,IAAID,EAAcM,EAAmB,OAAeW,GAAAA,EAAK,OAAS,SAAS,EACvE,OAACjB,EAAY,SACAA,GAAA,MAAMe,EAAsBd,CAAM,GAAG,OAAQgB,GAAcA,EAAK,OAAS,SAAS,GAE5FjB,EAAY,CAAC,CACtB,EAGMkB,EAAoB,CAACC,EAAQlB,IAAW,CACpC,QAAA,IAAI,4DAA6DkB,CAAM,EAE/E,MAAMC,EAAc,CAAC,EACfC,EAAU,CAAC,EACXC,EAAY,CAAC,EAEnBH,EAAO,QAAiBI,GAAA,SACd,QAAA,IAAI,2DAA4DA,EAAM,iBAAiB,EACzF,MAAAC,GACJD,GAAA,YAAAA,EAAO,qBAAsB,OAAQA,GAAA,YAAAA,EAAO,qBAAsB,IAAM,KAAK,MAAMA,GAAA,YAAAA,EAAO,iBAAiB,EAAI,OAE9GE,GAAAC,EAAAH,GAAA,YAAAA,EAAO,cAAP,YAAAG,EAAoB,OAApB,MAAAD,EAA0B,SAAS,aAAeF,EAAM,KAAK,SAAS,uBAAuB,IAC9FA,EAAM,OAAS,wBACfA,EAAM,OAAS,iBAEHH,EAAA,KAAKG,GAAA,YAAAA,EAAO,WAAW,EAC/BC,IAA4B,MACtBH,EAAA,KAAK,CAAE,GAAGG,EAAyB,QAASD,EAAM,GAAI,UAAWA,EAAM,KAAM,GAG/ED,EAAA,KAAK,CAAE,GAAGE,EAAyB,QAASD,EAAM,GAAI,UAAWA,EAAM,KAAM,CAAA,CACxF,EACO,QAAA,IAAI,+DAAgED,CAAS,EAErF,MAAMK,EAAmBL,EAAU,KAAaL,GAAAA,EAAK,YAAc,cAAc,EACzE,eAAA,IAAI,yEAA0EU,CAAgB,EACjGA,GACHC,EAAiB3B,CAAM,EAGlB,CAAE,YAAAmB,EAAa,QAAAC,CAAQ,CAChC,EAEMQ,EAAkB,MAAO5B,GAAiB,CAC1C,GAAA,CACI,MAAAkB,EAASlB,EAAS,MAAMA,EAAO,YAAc,MAAMT,EAAa,UAAU,EACxE,QAAA,IAAI,iCAAkC2B,CAAM,EAE9C,KAAA,CAAE,YAAAC,EAAa,QAAAC,GAAYH,EAAkBC,EAAQlB,GAAkBT,CAAY,EACzFgB,EAAgBW,CAAM,EACtBV,EAAsBW,CAAW,EACjCV,EAAiBW,CAAO,EACxBT,EAA6B,EAAK,QAC3BT,EAAO,CACN,QAAA,MAAM,gCAAiCA,CAAK,CAAA,CAExD,EAEM2B,EAAqB,MAAOC,GAAe,CACvC,QAAA,IAAI,gCAAiCA,CAAE,EAC3C,GAAA,CACF,MAAMvC,EAAa,YAAY,CAAE,GAAAuC,EAAI,EACrBlB,EAAA,eAAgB,UAAW,mEAAmE,EAC9FgB,EAAA,EAChBjB,EAA6B,EAAK,QAC3BT,EAAO,CACN,QAAA,MAAM,mCAAoCA,CAAK,EACvDU,EAAgB,uCAAwC,WAAY,OAAOV,CAAK,CAAC,EACjFS,EAA6B,EAAK,CAAA,CAEtC,EAEMoB,EAAoB,MAAOC,EAAgBC,IAAsB,CACjE,GAAA,CACI,MAAAlC,EAAc,MAAMgB,EAAsB,EAC1CmB,EAAoB,CACxB,OAAQ,CACN,CACE,cAAe,mCACf,KAAMF,GAASC,EAAW,4BAA4B,OAAO,SAAS,GAAK,eAC3E,cAAelC,EAAY,GAC3B,kBAAmBiC,GAASC,EAAW,KAAK,UAAU,CAAE,aAAcD,EAAO,eAAgB,OAAOC,CAAQ,CAAA,CAAG,EAAI,IACnH,cAAe,KAAK,UAAU,0BAA0B,CAAA,CAC1D,CAEJ,EACMf,EAAS,MAAM3B,EAAa,mBAAmB2C,CAAiB,EAC9D,QAAA,IAAI,mCAAoChB,CAAM,EAEtDN,EACE,wBACA,UACA,wJACF,EACgBgB,EAAA,QAET1B,EAAO,CACN,QAAA,MAAM,kCAAmCA,CAAK,EACtDU,EAAgB,qCAAsC,WAAY,OAAOV,CAAK,CAAC,EAC/EQ,EAAa,EAAK,EAClBC,EAA6B,EAAK,CAAA,CAEtC,EAEMgB,EAAmB,MAAO3B,GAAiB,CAC3C,GAAA,CAEF,MAAMkC,EAAoB,CACxB,OAAQ,CACN,CACE,cAAe,mCACf,KAAM,eACN,eANc,MAAMnB,EAAsBf,CAAM,GAMrB,GAC3B,kBAAmB,IACnB,cAAe,KAAK,UAAU,0BAA0B,CAAA,CAC1D,CAEJ,EACM,MAAAA,EAAO,mBAAmBkC,CAAiB,EACjCN,EAAA,QACT1B,EAAO,CACN,QAAA,MAAM,iCAAkCA,CAAK,CAAA,CAEzD,EAEO,MAAA,CAAE,gBAAA0B,EAAiB,kBAAAG,EAAmB,mBAAAF,CAAmB,CAClE"}