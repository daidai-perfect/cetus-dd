import{R as C,d as u,bc as a,bi as q,bj as B,bk as A}from"./index-D49RffYW.js";function L(){const{burnSdk:l}=C(),P=t=>{const{posId:r,clmmPool:c,coinTypeA:o,coinTypeB:n}=t,e={pos:r,pool:c,coinTypeA:o,coinTypeB:n};return l.Burn.createBurnPayload(e)},y=t=>{const{poolAddress:r,posId:c,coinTypeA:o,coinTypeB:n,account:e,rewarderCoinTypes:i}=t,s=l.Burn.createCollectFeePaylaod({pool:r,pos:c,coinTypeA:o,coinTypeB:n,account:e});return l.Burn.crateCollectRewardPayload({pool:r,pos:c,coinTypeA:o,coinTypeB:n,rewarderCoinTypes:i,account:e},s)},p=t=>{var i,s;const r=a.tickIndexToSqrtPriceX64(t.lowerTick),c=a.tickIndexToSqrtPriceX64(t.upperTick),o=q.getCoinAmountFromLiquidity(new B.BN(t.liquidity),new B.BN(t.currentSqrtPrice),r,c,t.roundUp),n=A(o.coinA.toString(),(i=t.defaultCoinA)==null?void 0:i.decimals),e=A(o.coinB.toString(),(s=t.defaultCoinB)==null?void 0:s.decimals);return{coinAAmount:n,coinBAmount:e}};return{getBurnTxPayload:P,getBurnClaimTxPayload:y,getBurnPositionAmountByPool:async(t,r)=>{const{poolAddress:c}=t,o=await l.Burn.getPoolBurnPositionList(c);let n=u(0),e=u(0);for(let i=0;i<o.length;i++){const s=o[i],{tick_lower_index:d,tick_upper_index:m,liquidity:T}=s,S=t==null?void 0:t.tokenA,k=t==null?void 0:t.tokenB,{coinAAmount:x,coinBAmount:g}=p({lowerTick:d,upperTick:m,currentSqrtPrice:r,roundUp:!1,liquidity:T,defaultCoinA:S,defaultCoinB:k});n=u(n).add(u(x)),e=u(e).add(u(g))}return{totalA:n.toString(),totalB:e.toString()}}}}export{L as u};
