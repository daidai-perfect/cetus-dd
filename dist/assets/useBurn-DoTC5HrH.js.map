{"version":3,"file":"useBurn-DoTC5HrH.js","sources":["../../src/hooks/burn/useBurn.ts"],"sourcesContent":["import { PoolApiInfo, PosBaseInfo } from '@/types'\nimport usePeripherySDKStore from '@cetus/stores/src/usePeripherySDKStore'\nimport { Token } from '@cetus/types'\nimport { convertScientificToDecimal, d } from '@cetus/utils'\nimport { ClmmPoolUtil, TickMath } from '@cetusprotocol/cetus-sui-clmm-sdk'\nimport { BN } from 'bn.js'\n\nexport default function useBurn() {\n  const { burnSdk } = usePeripherySDKStore()\n\n  /**\n   * 获取Burn操作tx paylaod\n   * @param posBaseInfo\n   * @returns\n   */\n  const getBurnTxPayload = (posBaseInfo: PosBaseInfo) => {\n    const { posId, clmmPool, coinTypeA, coinTypeB } = posBaseInfo\n    const params = {\n      pos: posId,\n      pool: clmmPool,\n      coinTypeA,\n      coinTypeB\n    }\n\n    const tx = burnSdk.Burn.createBurnPayload(params)\n\n    return tx\n  }\n\n  /**\n   * 获取Burn仓位Claim操作tx payload\n   * @param params\n   * @returns\n   */\n  const getBurnClaimTxPayload = (params: {\n    poolAddress: string\n    posId: string\n    coinTypeA: string\n    coinTypeB: string\n    account: string\n    rewarderCoinTypes: any\n  }) => {\n    const { poolAddress, posId, coinTypeA, coinTypeB, account, rewarderCoinTypes } = params\n\n    const txb = burnSdk.Burn.createCollectFeePaylaod({\n      pool: poolAddress,\n      pos: posId,\n      coinTypeA,\n      coinTypeB,\n      account\n    })\n\n    const tx = burnSdk.Burn.crateCollectRewardPayload(\n      {\n        pool: poolAddress,\n        pos: posId,\n        coinTypeA,\n        coinTypeB,\n        rewarderCoinTypes,\n        account\n      },\n      txb\n    )\n\n    return tx\n  }\n\n  const getCoinAmountFromLiquidity = (params: {\n    liquidity: string\n    lowerTick: number\n    upperTick: number\n    currentSqrtPrice: string\n    roundUp: boolean\n    defaultCoinA: Token\n    defaultCoinB: Token\n  }) => {\n    console.log('🚀🚀🚀 ~ file: usePositionList.ts:71 ~ getCoinAmountFromLiquidity ~ params:', params)\n    const lowerSqrtPrice = TickMath.tickIndexToSqrtPriceX64(params.lowerTick)\n    const upperSqrtPrice = TickMath.tickIndexToSqrtPriceX64(params.upperTick)\n    const result = ClmmPoolUtil.getCoinAmountFromLiquidity(\n      new BN(params.liquidity),\n      new BN(params.currentSqrtPrice),\n      lowerSqrtPrice,\n      upperSqrtPrice,\n      params.roundUp\n    )\n\n    const coinAAmount = convertScientificToDecimal(result.coinA.toString(), params.defaultCoinA?.decimals)\n    const coinBAmount = convertScientificToDecimal(result.coinB.toString(), params.defaultCoinB?.decimals)\n\n    return {\n      coinAAmount,\n      coinBAmount\n    }\n  }\n  const getBurnPositionAmountByPool = async (poolInfo: PoolApiInfo, current_sqrt_price: string) => {\n    const { poolAddress } = poolInfo\n    // const contractPoolInfo = await clmmSDK.Pool.getPool(address)\n    const positionList = await burnSdk.Burn.getPoolBurnPositionList(poolAddress)\n    console.log('🚀🚀🚀 ~ file: useBurn.ts:92 ~ getBurnPositionAmountByPool ~ positionList:', positionList)\n    let totalA = d(0)\n    let totalB = d(0)\n    for (let i = 0; i < positionList.length; i++) {\n      const position = positionList[i]\n      // 计算tokenA B数量\n      const { tick_lower_index, tick_upper_index, liquidity } = position\n      // const { current_sqrt_price } = contractPoolInfo\n      const defaultCoinA = poolInfo?.tokenA\n      const defaultCoinB = poolInfo?.tokenB\n      const { coinAAmount, coinBAmount } = getCoinAmountFromLiquidity({\n        lowerTick: tick_lower_index,\n        upperTick: tick_upper_index,\n        currentSqrtPrice: current_sqrt_price as string,\n        roundUp: false,\n        liquidity,\n        defaultCoinA: defaultCoinA as Token,\n        defaultCoinB: defaultCoinB as Token\n      })\n      totalA = d(totalA).add(d(coinAAmount))\n      totalB = d(totalB).add(d(coinBAmount))\n    }\n    return {\n      totalA: totalA.toString(),\n      totalB: totalB.toString()\n    }\n  }\n\n  return {\n    getBurnTxPayload,\n    getBurnClaimTxPayload,\n    getBurnPositionAmountByPool\n  }\n}\n"],"names":["useBurn","burnSdk","usePeripherySDKStore","getBurnTxPayload","posBaseInfo","posId","clmmPool","coinTypeA","coinTypeB","params","getBurnClaimTxPayload","poolAddress","account","rewarderCoinTypes","txb","getCoinAmountFromLiquidity","lowerSqrtPrice","TickMath","upperSqrtPrice","result","ClmmPoolUtil","BN","coinAAmount","convertScientificToDecimal","_a","coinBAmount","_b","poolInfo","current_sqrt_price","positionList","totalA","d","totalB","i","position","tick_lower_index","tick_upper_index","liquidity","defaultCoinA","defaultCoinB"],"mappings":"4GAOA,SAAwBA,GAAU,CAC1B,KAAA,CAAE,QAAAC,CAAQ,EAAIC,EAAqB,EAOnCC,EAAoBC,GAA6B,CACrD,KAAM,CAAE,MAAAC,EAAO,SAAAC,EAAU,UAAAC,EAAW,UAAAC,CAAc,EAAAJ,EAC5CK,EAAS,CACb,IAAKJ,EACL,KAAMC,EACN,UAAAC,EACA,UAAAC,CACF,EAIO,OAFIP,EAAQ,KAAK,kBAAkBQ,CAAM,CAGlD,EAOMC,EAAyBD,GAOzB,CACJ,KAAM,CAAE,YAAAE,EAAa,MAAAN,EAAO,UAAAE,EAAW,UAAAC,EAAW,QAAAI,EAAS,kBAAAC,GAAsBJ,EAE3EK,EAAMb,EAAQ,KAAK,wBAAwB,CAC/C,KAAMU,EACN,IAAKN,EACL,UAAAE,EACA,UAAAC,EACA,QAAAI,CAAA,CACD,EAcM,OAZIX,EAAQ,KAAK,0BACtB,CACE,KAAMU,EACN,IAAKN,EACL,UAAAE,EACA,UAAAC,EACA,kBAAAK,EACA,QAAAD,CACF,EACAE,CACF,CAGF,EAEMC,EAA8BN,GAQ9B,SACI,QAAA,IAAI,8EAA+EA,CAAM,EACjG,MAAMO,EAAiBC,EAAS,wBAAwBR,EAAO,SAAS,EAClES,EAAiBD,EAAS,wBAAwBR,EAAO,SAAS,EAClEU,EAASC,EAAa,2BAC1B,IAAIC,EAAG,GAAAZ,EAAO,SAAS,EACvB,IAAIY,EAAG,GAAAZ,EAAO,gBAAgB,EAC9BO,EACAE,EACAT,EAAO,OACT,EAEMa,EAAcC,EAA2BJ,EAAO,MAAM,YAAYK,EAAAf,EAAO,eAAP,YAAAe,EAAqB,QAAQ,EAC/FC,EAAcF,EAA2BJ,EAAO,MAAM,YAAYO,EAAAjB,EAAO,eAAP,YAAAiB,EAAqB,QAAQ,EAE9F,MAAA,CACL,YAAAJ,EACA,YAAAG,CACF,CACF,EAiCO,MAAA,CACL,iBAAAtB,EACA,sBAAAO,EACA,4BAnCkC,MAAOiB,EAAuBC,IAA+B,CACzF,KAAA,CAAE,YAAAjB,GAAgBgB,EAElBE,EAAe,MAAM5B,EAAQ,KAAK,wBAAwBU,CAAW,EACnE,QAAA,IAAI,6EAA8EkB,CAAY,EAClG,IAAAC,EAASC,EAAE,CAAC,EACZC,EAASD,EAAE,CAAC,EAChB,QAASE,EAAI,EAAGA,EAAIJ,EAAa,OAAQI,IAAK,CACtC,MAAAC,EAAWL,EAAaI,CAAC,EAEzB,CAAE,iBAAAE,EAAkB,iBAAAC,EAAkB,UAAAC,CAAc,EAAAH,EAEpDI,EAAeX,GAAA,YAAAA,EAAU,OACzBY,EAAeZ,GAAA,YAAAA,EAAU,OACzB,CAAE,YAAAL,EAAa,YAAAG,CAAY,EAAIV,EAA2B,CAC9D,UAAWoB,EACX,UAAWC,EACX,iBAAkBR,EAClB,QAAS,GACT,UAAAS,EACA,aAAAC,EACA,aAAAC,CAAA,CACD,EACDT,EAASC,EAAED,CAAM,EAAE,IAAIC,EAAET,CAAW,CAAC,EACrCU,EAASD,EAAEC,CAAM,EAAE,IAAID,EAAEN,CAAW,CAAC,CAAA,CAEhC,MAAA,CACL,OAAQK,EAAO,SAAS,EACxB,OAAQE,EAAO,SAAS,CAC1B,CACF,CAMA,CACF"}