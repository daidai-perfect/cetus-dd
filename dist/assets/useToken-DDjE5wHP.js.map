{"version":3,"file":"useToken-DDjE5wHP.js","sources":["../../../hooks/src/useToken.ts"],"sourcesContent":["import { Token } from '@cetus/types'\nimport { coinMetadataToCoinInfo } from '@cetus/utils'\nimport { CoinAssist, extractStructTagFromType } from '@cetusprotocol/cetus-sui-clmm-sdk'\nimport { useCallback, useEffect, useMemo } from 'react'\nimport useTokenStore from '../../stores/src/token'\nimport useClmmSDKStore from '../../stores/src/useClmmSDKStore'\n\nexport function useGetToken(coinType?: string) {\n  const { tokenMap, setToken, requestTokenList, addRequestTokenList } = useTokenStore()\n  const { clmmSdk } = useClmmSDKStore()\n\n  useEffect(() => {\n    if (coinType) {\n      if (!getTokenInfo(coinType)) {\n        fetchTokenInfo(coinType)\n      }\n    }\n  }, [coinType])\n\n  const fetchTokenInfo = async (coinType: string): Promise<Token | undefined> => {\n    try {\n      const info = getTokenInfo(coinType)\n      if (info) {\n        return info\n      }\n      if (requestTokenList.includes(coinType)) {\n        return undefined\n      }\n      addRequestTokenList(coinType)\n      const res = await clmmSdk.fullClient.getCoinMetadata({ coinType })\n      if (res) {\n        if (CoinAssist.isSuiCoin(coinType)) {\n          res.iconUrl = 'https://archive.cetus.zone/assets/image/sui/sui.png'\n        }\n        const token = coinMetadataToCoinInfo(res, coinType)\n        setToken(token)\n        console.log('ðŸš€ ~ file: useToken.ts:38 ~ fetchTokenInfo ~ token:', token, requestTokenList)\n\n        return token\n      }\n    } catch (error) {\n      console.log('ðŸš€ ~ file: useToken.ts:44 ~ fetchTokenInfo ~ error:', error)\n    }\n\n    return undefined\n  }\n\n  const getTokenInfo = useCallback(\n    (coinType?: string) => {\n      if (coinType) {\n        return tokenMap.get(extractStructTagFromType(coinType).full_address) || tokenMap.get(coinType)\n      }\n\n      return undefined\n    },\n    [tokenMap]\n  )\n\n  const tokenInfo = useMemo(() => {\n    return getTokenInfo(coinType)\n  }, [coinType, tokenMap])\n\n  return {\n    tokenInfo,\n    getTokenInfo,\n    fetchTokenInfo\n  }\n}\n"],"names":["useGetToken","coinType","tokenMap","setToken","requestTokenList","addRequestTokenList","useTokenStore","clmmSdk","useClmmSDKStore","useEffect","getTokenInfo","fetchTokenInfo","info","res","CoinAssist","token","coinMetadataToCoinInfo","error","useCallback","extractStructTagFromType","useMemo"],"mappings":"iHAOO,SAASA,EAAYC,EAAmB,CAC7C,KAAM,CAAE,SAAAC,EAAU,SAAAC,EAAU,iBAAAC,EAAkB,oBAAAC,CAAA,EAAwBC,EAAc,EAC9E,CAAE,QAAAC,CAAQ,EAAIC,EAAgB,EAEpCC,EAAAA,UAAU,IAAM,CACVR,IACGS,EAAaT,CAAQ,GACxBU,EAAeV,CAAQ,EAE3B,EACC,CAACA,CAAQ,CAAC,EAEP,MAAAU,EAAiB,MAAOV,GAAiD,CACzE,GAAA,CACI,MAAAW,EAAOF,EAAaT,CAAQ,EAClC,GAAIW,EACK,OAAAA,EAEL,GAAAR,EAAiB,SAASH,CAAQ,EAC7B,OAETI,EAAoBJ,CAAQ,EACtB,MAAAY,EAAM,MAAMN,EAAQ,WAAW,gBAAgB,CAAE,SAAAN,EAAU,EACjE,GAAIY,EAAK,CACHC,EAAW,UAAUb,CAAQ,IAC/BY,EAAI,QAAU,uDAEV,MAAAE,EAAQC,EAAuBH,EAAKZ,CAAQ,EAClD,OAAAE,EAASY,CAAK,EACN,QAAA,IAAI,sDAAuDA,EAAOX,CAAgB,EAEnFW,CAAA,QAEFE,EAAO,CACN,QAAA,IAAI,sDAAuDA,CAAK,CAAA,CAI5E,EAEMP,EAAeQ,EAAA,YAClBjB,GAAsB,CACrB,GAAIA,EACK,OAAAC,EAAS,IAAIiB,EAAyBlB,CAAQ,EAAE,YAAY,GAAKC,EAAS,IAAID,CAAQ,CAIjG,EACA,CAACC,CAAQ,CACX,EAMO,MAAA,CACL,UALgBkB,EAAAA,QAAQ,IACjBV,EAAaT,CAAQ,EAC3B,CAACA,EAAUC,CAAQ,CAAC,EAIrB,aAAAQ,EACA,eAAAC,CACF,CACF"}