{"version":3,"file":"useAccountBalance-BlkjpDIb.js","sources":["../../../hooks/src/useAccountBalance.ts"],"sourcesContent":["import { useAccountStore } from '@cetus/stores'\nimport useTokenBalanceStore from '@cetus/stores/src/tokenBalance'\nimport useClmmSDKStore from '@cetus/stores/src/useClmmSDKStore'\nimport { extractStructTagFromType } from '@cetusprotocol/cetus-sui-clmm-sdk'\nimport { CoinBalance } from '@mysten/sui/client'\nimport { useEffect, useRef } from 'react'\n\nexport function useAccountBalance() {\n  const { currentAccount } = useAccountStore()\n  const { clmmSdk } = useClmmSDKStore()\n  const { setTokenBalanceObj, clearData, setIsLoading, isLoading, ownerAddress } = useTokenBalanceStore()\n  const currentAcc = useRef(currentAccount?.address)\n  useEffect(() => {\n    currentAcc.current = currentAccount?.address\n  }, [currentAccount?.address])\n\n  const fetchAccountBalance = async (account: string = currentAccount?.address || '', forceRefresh: boolean = false) => {\n    try {\n      if (isLoading && !forceRefresh) {\n        return\n      }\n\n      if (account) {\n        setIsLoading(true)\n        const res = await clmmSdk.getOwnerCoinBalances(account)\n        const obj: Record<string, CoinBalance> = {}\n        res.forEach(coin => {\n          obj[extractStructTagFromType(coin.coinType).full_address] = coin\n        })\n        if (account == currentAcc.current) {\n          setTokenBalanceObj(obj, account)\n        }\n      }\n    } catch (error) {\n      console.log('ðŸš€ ~ file: useAccountBalance.ts:18 ~ fetchAccountBalance ~ error:', error)\n      if (ownerAddress !== account) {\n        clearData()\n      }\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const fetchCoinBalance = async (account: string = currentAccount?.address || '', coinType?: string) => {\n    try {\n      if (account && coinType) {\n        const res = await clmmSdk.getOwnerCoinBalances(account, coinType)\n        const obj: Record<string, CoinBalance> = {}\n\n        res.forEach(coin => {\n          obj[extractStructTagFromType(coin.coinType).full_address] = coin\n        })\n        if (account == currentAcc.current) {\n          setTokenBalanceObj(obj, account)\n        }\n      }\n    } catch (error) {\n      console.log('ðŸš€ ~ file: useAccountBalance.ts:18 ~ fetchCoinBalance ~ error:', error)\n    }\n  }\n\n  useEffect(() => {\n    if (!currentAccount) {\n      clearData()\n      setIsLoading(false)\n    }\n  }, [currentAccount?.address])\n\n  return {\n    fetchAccountBalance,\n    fetchCoinBalance,\n    isLoading\n  }\n}\n"],"names":["useAccountBalance","currentAccount","useAccountStore","clmmSdk","useClmmSDKStore","setTokenBalanceObj","clearData","setIsLoading","isLoading","ownerAddress","useTokenBalanceStore","currentAcc","useRef","useEffect","fetchAccountBalance","account","forceRefresh","res","obj","coin","extractStructTagFromType","error","fetchCoinBalance","coinType"],"mappings":"uGAOO,SAASA,GAAoB,CAC5B,KAAA,CAAE,eAAAC,CAAe,EAAIC,EAAgB,EACrC,CAAE,QAAAC,CAAQ,EAAIC,EAAgB,EAC9B,CAAE,mBAAAC,EAAoB,UAAAC,EAAW,aAAAC,EAAc,UAAAC,EAAW,aAAAC,GAAiBC,EAAqB,EAChGC,EAAaC,EAAAA,OAAOX,GAAA,YAAAA,EAAgB,OAAO,EACjDY,EAAAA,UAAU,IAAM,CACdF,EAAW,QAAUV,GAAA,YAAAA,EAAgB,OAAA,EACpC,CAACA,GAAA,YAAAA,EAAgB,OAAO,CAAC,EAE5B,MAAMa,EAAsB,MAAOC,GAAkBd,GAAA,YAAAA,EAAgB,UAAW,GAAIe,EAAwB,KAAU,CAChH,GAAA,CACE,GAAAR,GAAa,CAACQ,EAChB,OAGF,GAAID,EAAS,CACXR,EAAa,EAAI,EACjB,MAAMU,EAAM,MAAMd,EAAQ,qBAAqBY,CAAO,EAChDG,EAAmC,CAAC,EAC1CD,EAAI,QAAgBE,GAAA,CAClBD,EAAIE,EAAyBD,EAAK,QAAQ,EAAE,YAAY,EAAIA,CAAA,CAC7D,EACGJ,GAAWJ,EAAW,SACxBN,EAAmBa,EAAKH,CAAO,CACjC,QAEKM,EAAO,CACN,QAAA,IAAI,oEAAqEA,CAAK,EAClFZ,IAAiBM,GACTT,EAAA,CACZ,QACA,CACAC,EAAa,EAAK,CAAA,CAEtB,EAEMe,EAAmB,MAAOP,GAAkBd,GAAA,YAAAA,EAAgB,UAAW,GAAIsB,IAAsB,CACjG,GAAA,CACF,GAAIR,GAAWQ,EAAU,CACvB,MAAMN,EAAM,MAAMd,EAAQ,qBAAqBY,EAASQ,CAAQ,EAC1DL,EAAmC,CAAC,EAE1CD,EAAI,QAAgBE,GAAA,CAClBD,EAAIE,EAAyBD,EAAK,QAAQ,EAAE,YAAY,EAAIA,CAAA,CAC7D,EACGJ,GAAWJ,EAAW,SACxBN,EAAmBa,EAAKH,CAAO,CACjC,QAEKM,EAAO,CACN,QAAA,IAAI,iEAAkEA,CAAK,CAAA,CAEvF,EAEAR,OAAAA,EAAAA,UAAU,IAAM,CACTZ,IACOK,EAAA,EACVC,EAAa,EAAK,EACpB,EACC,CAACN,GAAA,YAAAA,EAAgB,OAAO,CAAC,EAErB,CACL,oBAAAa,EACA,iBAAAQ,EACA,UAAAd,CACF,CACF"}