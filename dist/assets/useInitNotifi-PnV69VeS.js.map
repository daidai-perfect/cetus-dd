{"version":3,"file":"useInitNotifi-PnV69VeS.js","sources":["../../../cetus-design/src/hook/useNotifi/useInitNotifi.ts"],"sourcesContent":["import { useSigner } from '@cetus/hooks'\nimport { useAccountStore } from '@cetus/stores'\nimport useNotifiStore from '@cetus/stores/src/notifi'\nimport { instantiateFrontendClient, UserState } from '@notifi-network/notifi-frontend-client'\nimport useGetNotifiTargetGroups from './useGetNotifiTargetGroups'\nimport useNotifiAlerts from './useNotifiAlerts'\n\nexport default function useIntNotifi() {\n  const tenantId = 'cetus' // dappAddress\n  const env = 'Production' // or 'Development'\n  const walletBlockchain = 'SUI' // e.g. 'Ethereum'\n  const {\n    setNotifiClient,\n    notifiClient,\n    setNotifiStatus,\n    setNotifiAccountAddress,\n    setDefaultTargetGroup,\n    setNotifiSourceGroups,\n    setNotifiSources,\n    setNotifiLoginLoading,\n    setTelegramTarget,\n    setEmailTarget,\n    setSmsTarget\n  } = useNotifiStore()\n  const { signUserMessage } = useSigner()\n  const { currentAccount } = useAccountStore()\n  const { ensureTargetGroup, getNotifiTargetGroups } = useGetNotifiTargetGroups()\n  const { getNotifiAlerts } = useNotifiAlerts()\n  // 初始化notifi\n  const initNotifi = async (walletPublicKey: string) => {\n    const client = instantiateFrontendClient(\n      tenantId,\n      {\n        walletBlockchain,\n        walletPublicKey,\n        accountAddress: walletPublicKey\n      },\n      env\n    )\n    const initResult: UserState = await client.initialize()\n    setNotifiClient(client)\n    setNotifiStatus(initResult.status)\n    // 刷新或重新打开页面notifi 登录状态还在\n    if (initResult?.status === 'authenticated') {\n      getNotifiTargetGroups(client)\n      getNotifiAlerts(client)\n      setNotifiAccountAddress(walletPublicKey)\n    } else {\n      clearNotifiInfo()\n    }\n  }\n\n  const notifiLogin = async (targetGroupParams: { emailAddress: string; phoneNumber: string; telegramId: string }) => {\n    try {\n      setNotifiLoginLoading(true)\n      console.log('🚀🚀🚀 ~ useInitNotifi.ts:63 ~ notifiLogin ~ notifiClient:', notifiClient)\n      const loginResult = await notifiClient.logIn({\n        walletBlockchain,\n        signMessage: async (message: Uint8Array) => {\n          console.log('🚀🚀🚀 ~ useInitNotifi.ts:63 ~ signMessage: ~ message:', message)\n          try {\n            const signature = await signUserMessage(message)\n            return signature.signature\n          } catch (error) {\n            console.log('🚀🚀🚀 ~ useInitNotifi.ts:67 ~ signMessage: ~ error:', error)\n          }\n        }\n      })\n      console.log('🚀🚀🚀 ~ useInitNotifi.ts:67 ~ notifiLogin ~ notifiClient:', notifiClient)\n      const { status } = notifiClient.userState\n      setNotifiStatus(status)\n      if (status === 'authenticated' && currentAccount?.address) {\n        getNotifiAlerts()\n        getNotifiTargetGroups()\n        setNotifiAccountAddress(currentAccount.address)\n      }\n      console.log('🚀🚀🚀 ~ useInitNotifi.ts:75 ~ notifiLogin ~ loginResult:', loginResult)\n      if (loginResult) {\n        // 登录时重新设置TargetGroup\n        await ensureTargetGroup(targetGroupParams)\n        setNotifiLoginLoading(false)\n      }\n    } catch (error) {\n      console.log('🚀🚀🚀 ~ useInitNotifi.ts:91 ~ notifiLogin ~ error:', error)\n      setNotifiLoginLoading(false)\n    }\n  }\n\n  const clearNotifiInfo = () => {\n    setDefaultTargetGroup([])\n    setNotifiSourceGroups([])\n    setNotifiSources([])\n    setEmailTarget({})\n    setTelegramTarget({})\n    setSmsTarget({})\n  }\n  return { initNotifi, notifiLogin }\n}\n"],"names":["useIntNotifi","tenantId","env","walletBlockchain","setNotifiClient","notifiClient","setNotifiStatus","setNotifiAccountAddress","setDefaultTargetGroup","setNotifiSourceGroups","setNotifiSources","setNotifiLoginLoading","setTelegramTarget","setEmailTarget","setSmsTarget","useNotifiStore","signUserMessage","useSigner","currentAccount","useAccountStore","ensureTargetGroup","getNotifiTargetGroups","useGetNotifiTargetGroups","getNotifiAlerts","useNotifiAlerts","initNotifi","walletPublicKey","client","instantiateFrontendClient","initResult","clearNotifiInfo","notifiLogin","targetGroupParams","loginResult","message","error","status"],"mappings":"8LAOA,SAAwBA,GAAe,CACrC,MAAMC,EAAW,QACXC,EAAM,aACNC,EAAmB,MACnB,CACJ,gBAAAC,EACA,aAAAC,EACA,gBAAAC,EACA,wBAAAC,EACA,sBAAAC,EACA,sBAAAC,EACA,iBAAAC,EACA,sBAAAC,EACA,kBAAAC,EACA,eAAAC,EACA,aAAAC,GACEC,EAAe,EACb,CAAE,gBAAAC,CAAgB,EAAIC,EAAU,EAChC,CAAE,eAAAC,CAAe,EAAIC,EAAgB,EACrC,CAAE,kBAAAC,EAAmB,sBAAAC,CAAsB,EAAIC,EAAyB,EACxE,CAAE,gBAAAC,CAAgB,EAAIC,EAAgB,EAEtCC,EAAa,MAAOC,GAA4B,CACpD,MAAMC,EAASC,EACb3B,EACA,CACE,iBAAAE,EACA,gBAAAuB,EACA,eAAgBA,CAClB,EACAxB,CACF,EACM2B,EAAwB,MAAMF,EAAO,WAAW,EACtDvB,EAAgBuB,CAAM,EACtBrB,EAAgBuB,EAAW,MAAM,GAE7BA,GAAA,YAAAA,EAAY,UAAW,iBACzBR,EAAsBM,CAAM,EAC5BJ,EAAgBI,CAAM,EACtBpB,EAAwBmB,CAAe,GAEvBI,EAAA,CAEpB,EAEMC,EAAc,MAAOC,GAAyF,CAC9G,GAAA,CACFrB,EAAsB,EAAI,EAClB,QAAA,IAAI,6DAA8DN,CAAY,EAChF,MAAA4B,EAAc,MAAM5B,EAAa,MAAM,CAC3C,iBAAAF,EACA,YAAa,MAAO+B,GAAwB,CAClC,QAAA,IAAI,yDAA0DA,CAAO,EACzE,GAAA,CAEF,OADkB,MAAMlB,EAAgBkB,CAAO,GAC9B,gBACVC,EAAO,CACN,QAAA,IAAI,uDAAwDA,CAAK,CAAA,CAC3E,CACF,CACD,EACO,QAAA,IAAI,6DAA8D9B,CAAY,EAChF,KAAA,CAAE,OAAA+B,GAAW/B,EAAa,UAChCC,EAAgB8B,CAAM,EAClBA,IAAW,kBAAmBlB,GAAA,MAAAA,EAAgB,WAChCK,EAAA,EACMF,EAAA,EACtBd,EAAwBW,EAAe,OAAO,GAExC,QAAA,IAAI,4DAA6De,CAAW,EAChFA,IAEF,MAAMb,EAAkBY,CAAiB,EACzCrB,EAAsB,EAAK,SAEtBwB,EAAO,CACN,QAAA,IAAI,sDAAuDA,CAAK,EACxExB,EAAsB,EAAK,CAAA,CAE/B,EAEMmB,EAAkB,IAAM,CAC5BtB,EAAsB,CAAA,CAAE,EACxBC,EAAsB,CAAA,CAAE,EACxBC,EAAiB,CAAA,CAAE,EACnBG,EAAe,CAAA,CAAE,EACjBD,EAAkB,CAAA,CAAE,EACpBE,EAAa,CAAA,CAAE,CACjB,EACO,MAAA,CAAE,WAAAW,EAAY,YAAAM,CAAY,CACnC"}