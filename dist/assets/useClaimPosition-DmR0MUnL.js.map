{"version":3,"file":"useClaimPosition-DmR0MUnL.js","sources":["../../src/hooks/burn/useBurn.ts","../../src/utils/contract-helper.ts","../../src/hooks/position/usePosClaimFeeAndReward.ts","../../src/hooks/position/useClaimPosition.ts"],"sourcesContent":["import { PoolApiInfo, PosBaseInfo } from '@/types'\nimport { useSdk } from '@cetus/sdk-factory'\nimport { Token } from '@cetus/types'\nimport { convertScientificToDecimal, d } from '@cetus/utils'\nimport { ClmmPoolUtil, TickMath } from '@cetusprotocol/common-sdk'\nimport { BN } from 'bn.js'\n\nexport default function useBurn() {\n  const burnSdk = useSdk('burn')\n\n  /**\n   * Ëé∑ÂèñBurnÊìç‰Ωútx paylaod\n   * @param posBaseInfo\n   * @returns\n   */\n  const getBurnTxPayload = (posBaseInfo: PosBaseInfo) => {\n    const { posId, clmmPool, coinTypeA, coinTypeB } = posBaseInfo\n    const params = {\n      pos_id: posId,\n      pool_id: clmmPool,\n      coin_type_a: coinTypeA,\n      coin_type_b: coinTypeB\n    }\n\n    const tx = burnSdk!.Burn.createBurnPayload(params)\n\n    return tx\n  }\n\n  /**\n   * Ëé∑ÂèñBurn‰ªì‰ΩçClaimÊìç‰Ωútx payload\n   * @param params\n   * @returns\n   */\n  const getBurnClaimTxPayload = (params: {\n    poolAddress: string\n    posId: string\n    coinTypeA: string\n    coinTypeB: string\n    account: string\n    rewarderCoinTypes: any\n  }) => {\n    const { poolAddress, posId, coinTypeA, coinTypeB, account, rewarderCoinTypes } = params\n\n    const txb = burnSdk!.Burn.createCollectFeesPayload([\n      {\n        pool_id: poolAddress,\n        pos_id: posId,\n        coin_type_a: coinTypeA,\n        coin_type_b: coinTypeB,\n        account\n      }\n    ])\n\n    const tx = burnSdk!.Burn.crateCollectRewardsPayload(\n      [\n        {\n          pool_id: poolAddress,\n          pos_id: posId,\n          coin_type_a: coinTypeA,\n          coin_type_b: coinTypeB,\n          rewarder_coin_types: rewarderCoinTypes,\n          account\n        }\n      ],\n      txb\n    )\n\n    return tx\n  }\n\n  const getCoinAmountFromLiquidity = (params: {\n    liquidity: string\n    lowerTick: number\n    upperTick: number\n    currentSqrtPrice: string\n    roundUp: boolean\n    defaultCoinA: Token\n    defaultCoinB: Token\n  }) => {\n    console.log('üöÄüöÄüöÄ ~ file: usePositionList.ts:71 ~ getCoinAmountFromLiquidity ~ params:', params)\n    const lowerSqrtPrice = TickMath.tickIndexToSqrtPriceX64(params.lowerTick)\n    const upperSqrtPrice = TickMath.tickIndexToSqrtPriceX64(params.upperTick)\n    const result = ClmmPoolUtil.getCoinAmountFromLiquidity(\n      new BN(params.liquidity),\n      new BN(params.currentSqrtPrice),\n      lowerSqrtPrice,\n      upperSqrtPrice,\n      params.roundUp\n    )\n\n    const coinAAmount = convertScientificToDecimal(result.coin_amount_a.toString(), params.defaultCoinA?.decimals)\n    const coinBAmount = convertScientificToDecimal(result.coin_amount_b.toString(), params.defaultCoinB?.decimals)\n\n    return {\n      coinAAmount,\n      coinBAmount\n    }\n  }\n  const getBurnPositionAmountByPool = async (poolInfo: PoolApiInfo, current_sqrt_price: string) => {\n    const { poolAddress } = poolInfo\n    // const contractPoolInfo = await clmmSDK.Pool.getPool(address)\n    const positionList = (await burnSdk!.Burn.getPoolBurnPositionList(poolAddress)) || []\n    console.log('üöÄüöÄüöÄ ~ file: useBurn.ts:92 ~ getBurnPositionAmountByPool ~ positionList:', positionList)\n    let totalA = d(0)\n    let totalB = d(0)\n    for (let i = 0; i < positionList?.length; i++) {\n      const position = positionList[i]\n      // ËÆ°ÁÆótokenA BÊï∞Èáè\n      const { tick_lower_index, tick_upper_index, liquidity } = position\n      // const { current_sqrt_price } = contractPoolInfo\n      const defaultCoinA = poolInfo?.tokenA\n      const defaultCoinB = poolInfo?.tokenB\n      const { coinAAmount, coinBAmount } = getCoinAmountFromLiquidity({\n        lowerTick: tick_lower_index,\n        upperTick: tick_upper_index,\n        currentSqrtPrice: current_sqrt_price as string,\n        roundUp: false,\n        liquidity,\n        defaultCoinA: defaultCoinA as Token,\n        defaultCoinB: defaultCoinB as Token\n      })\n      totalA = d(totalA).add(d(coinAAmount))\n      totalB = d(totalB).add(d(coinBAmount))\n    }\n    return {\n      totalA: totalA.toString(),\n      totalB: totalB.toString()\n    }\n  }\n\n  return {\n    getBurnTxPayload,\n    getBurnClaimTxPayload,\n    getBurnPositionAmountByPool\n  }\n}\n","import { asIntN } from '@cetusprotocol/common-sdk'\nimport BN from 'bn.js'\n\nexport const deleteOx = (address: string) => {\n  if (address.startsWith('0x')) {\n    return address.slice(2)\n  }\n  return address\n}\n\nexport function getTickDataFromUrlData(ticks: any) {\n  const tickdatas: any[] = []\n  for (const tick of ticks) {\n    const td: any = {\n      objectId: tick.objectId,\n      index: Number(asIntN(BigInt(tick.index)).toString()),\n      sqrtPrice: tick.sqrtPrice,\n      liquidityNet: new BN(BigInt.asIntN(128, BigInt(BigInt(tick.liquidityNet.toString()))).toString()),\n      liquidityGross: tick.liquidityGross,\n      feeGrowthOutsideA: tick.feeGrowthOutsideA,\n      feeGrowthOutsideB: tick.feeGrowthOutsideB,\n      rewardersGrowthOutside: [new BN(tick.rewardersGrowthOutside[0]), new BN(tick.rewardersGrowthOutside[1]), new BN(tick.rewardersGrowthOutside[2])]\n    }\n    tickdatas.push(td)\n  }\n  return tickdatas\n}\n","import useBurn from '@/hooks/burn/useBurn'\nimport { MsafeTransactionSubType, PosBaseInfo, PosReward } from '@/types'\nimport { deleteOx } from '@/utils/contract-helper'\nimport { useSdk } from '@cetus/sdk-factory'\nimport { CollectRewardParams } from '@cetusprotocol/burn-sdk'\nimport { HarvestFeeAndClmmRewarderParams, HarvestParams } from '@cetusprotocol/farms-sdk'\nimport { CollectRewarderParams } from '@cetusprotocol/sui-clmm-sdk'\nimport useFarms from '../farms/useFarms'\n\nexport default function usePosClaimFeeAndReward() {\n  const clmmSdk = useSdk('clmm')\n  const farmsSdk = useSdk('farms')\n  const burnSdk = useSdk('burn')\n  const { getBurnClaimTxPayload } = useBurn()\n  const { getHarvestFarmsTxPayload } = useFarms()\n\n  /**\n   * Êî∂Ââ≤‰ªì‰ΩçÁöÑfeeÂíårewardÔºåÊîØÊåÅclmm, farms, burn\n   * @param params\n   * @returns\n   */\n  interface RewardTxPayloadProps {\n    posType: 'clmm' | 'farms' | 'burn'\n    id: string\n    clmmPool: string\n    coinTypeA: string\n    coinTypeB: string\n    rewarderCoinTypes?: any\n    account?: string\n  }\n  const getPosClaimFeeAndRewardTxPayload = async (params: RewardTxPayloadProps) => {\n    const { posType, id, clmmPool, coinTypeA, coinTypeB, rewarderCoinTypes, account } = params\n    let tx, msafeParams\n    if (posType === 'clmm') {\n      const parameter = {\n        pool_id: clmmPool,\n        pos_id: id,\n        rewarder_coin_types: rewarderCoinTypes,\n        coin_type_a: coinTypeA,\n        coin_type_b: coinTypeB,\n        collect_fee: true\n      }\n\n      tx = await clmmSdk!.Rewarder.collectRewarderPayload(parameter)\n\n      msafeParams = {\n        action: MsafeTransactionSubType.ClaimFeeAndMining,\n        txbParams: parameter\n      }\n    } else if (posType === 'farms') {\n      const parameter = {\n        coin_type_a: coinTypeA,\n        coin_type_b: coinTypeB,\n        clmm_pool_id: clmmPool,\n        position_nft_id: id,\n        clmm_rewarder_types: rewarderCoinTypes,\n        collect_fee: true\n      }\n\n      tx = await farmsSdk!.Farms.claimFeeAndClmmReward(parameter)\n\n      msafeParams = {\n        action: 'FarmingClaimFeeAndReward',\n        txbParams: parameter\n      }\n    } else if (posType === 'burn') {\n      const parameter = {\n        poolAddress: clmmPool,\n        posId: id,\n        coinTypeA,\n        coinTypeB,\n        account: account as string,\n        rewarderCoinTypes\n      }\n\n      tx = getBurnClaimTxPayload(parameter)\n    }\n\n    return {\n      tx,\n      msafeParams\n    }\n  }\n\n  /**\n   * ÊâπÈáèÊî∂Ââ≤FeeÂíåRewards\n   * @param posBaseList\n   * @param posRewardsData\n   * @param account\n   * @returns\n   */\n  const getBatchHarvestFeeAndRewardsTxPayload = async (posBaseList: PosBaseInfo[], posRewardsData: Record<string, PosReward[]>, account: string) => {\n    console.log('üöÄ ~ getBatchHarvestFeeAndRewardsTxPayload ~ posBaseList:', posBaseList, posRewardsData, account)\n    const clmmHarvestParams: CollectRewarderParams[] = []\n    const framsHavestParams: HarvestFeeAndClmmRewarderParams[] = []\n    const burnHavestParams: CollectRewardParams[] = []\n    const farmsParams: HarvestParams[] = []\n\n    posBaseList.forEach(position => {\n      const rewarderCoinTypes = posRewardsData[position.posId]?.map((item: PosReward) => item.coin_address) || []\n      console.log('üöÄ ~ getBatchHarvestFeeAndRewardsTxPayload ~ rewarderCoinTypes:', rewarderCoinTypes)\n\n      if (position.posType == 'clmm') {\n        clmmHarvestParams.push({\n          pool_id: position.clmmPool,\n          pos_id: position.id,\n          collect_fee: true,\n          rewarder_coin_types: rewarderCoinTypes,\n          coin_type_a: deleteOx(position.coinTypeA),\n          coin_type_b: deleteOx(position.coinTypeB)\n        })\n      } else if (position.posType == 'farms') {\n        framsHavestParams.push({\n          pool_id: position.farmsPool || '',\n          position_nft_id: position.id,\n          clmm_pool_id: position.clmmPool,\n          collect_fee: true,\n          collect_farms_rewarder: false,\n          clmm_rewarder_types: rewarderCoinTypes,\n          coin_type_a: position.coinTypeA,\n          coin_type_b: position.coinTypeB\n        })\n        farmsParams.push({\n          pool_id: position.farmsPool || '',\n          position_nft_id: position.id\n        })\n      } else {\n        burnHavestParams.push({\n          pos_id: position?.id || '',\n          pool_id: position.clmmPool,\n          coin_type_a: position.coinTypeA,\n          coin_type_b: position.coinTypeB,\n          rewarder_coin_types: rewarderCoinTypes,\n          account\n        })\n      }\n    })\n\n    const batchHarvestAndClmmFeeTx = await farmsSdk!.Farms.batchHarvestAndClmmFeePayload(framsHavestParams, clmmHarvestParams)\n\n    const burnRewardList = []\n    for (let i = 0; i < burnHavestParams.length; i++) {\n      const item = burnHavestParams[i]\n      if (item?.rewarder_coin_types.length > 0) {\n        burnRewardList.push(item)\n      }\n    }\n    const txb = burnSdk!.Burn.createCollectFeesPayload(burnHavestParams, batchHarvestAndClmmFeeTx)\n\n    const tx = burnSdk!.Burn.crateCollectRewardsPayload(burnRewardList, txb)\n\n    const txf = await farmsSdk!.Farms.batchHarvestPayload(farmsParams, tx)\n\n    return { txb, tx, txf }\n  }\n\n  /**\n   * Êî∂Ââ≤‰ªì‰ΩçÁöÑfeeÂíåminingÂíåfarmingÂ•ñÂä±ÔºåÊîØÊåÅclmm, farms, burn\n   * @param params\n   * @returns\n   */\n  const getPosClaimFeeAndRewardAndFarmsTxPayload = async (\n    params: RewardTxPayloadProps & {\n      farmsPool: string\n    }\n  ) => {\n    console.log('üöÄ ~ usePosClaimFeeAndReward ~ params:', params)\n\n    const { id, farmsPool } = params\n    let txf\n    const { tx, msafeParams } = await getPosClaimFeeAndRewardTxPayload(params)\n    txf = tx\n\n    if (farmsPool) {\n      const { tx, msafeParams } = await getHarvestFarmsTxPayload(farmsPool, id, txf)\n      return { tx, msafeParams }\n    }\n\n    return { tx, msafeParams }\n  }\n  return {\n    getPosClaimFeeAndRewardAndFarmsTxPayload,\n    getPosClaimFeeAndRewardTxPayload,\n    getBatchHarvestFeeAndRewardsTxPayload\n  }\n}\n","import usePositionStore from '@/store/position'\nimport { PosBaseInfo, PosReward } from '@/types'\nimport { useAccountBalance } from '@cetus/hooks'\nimport { useAccountStore } from '@cetus/stores'\nimport { TransactionStatusType } from '@cetus/types'\nimport { fixCoinType } from '@cetusprotocol/common-sdk'\nimport { useState } from 'react'\nimport useTransaction from '../common/useTransaction'\nimport useGetFarmsPosRewards from './useGetFarmsPosRewards'\nimport useGetPosfees from './useGetPosfees'\nimport useGetPosPools from './useGetPosPools'\nimport useGetPosRewards from './useGetPosRewards'\nimport usePosClaimFeeAndReward from './usePosClaimFeeAndReward'\n\nexport default function useClaimPosition() {\n  const { fetchAccountBalance } = useAccountBalance()\n  const { posRewardsData, farmsPosRewardsData } = usePositionStore()\n  const { getPosFeeData } = useGetPosfees()\n  const { getPosRewardsData } = useGetPosRewards()\n  const { getFarmsRewardsData } = useGetFarmsPosRewards()\n  const { signAndExecuteTransaction } = useTransaction()\n  const { getPosClaimFeeAndRewardAndFarmsTxPayload } = usePosClaimFeeAndReward()\n  const { currentAccount } = useAccountStore()\n  const [isClaimLoading, setIsClaimLoading] = useState(false)\n  const { getPosPoolsOriginalObj } = useGetPosPools()\n\n  // isClaimFarmsÊòØÂê¶Êî∂Ââ≤farmsÂ•ñÂä±\n  const toClaimPosition = async (positionInfo: any, curPosContractPoolInfo?: any, isClaimFarms?: boolean) => {\n    setIsClaimLoading(true)\n\n    try {\n      const posId = positionInfo?.posId\n      const id = positionInfo?.id\n\n      const farmsRewards = farmsPosRewardsData[id] || []\n      const miningRewards = posRewardsData[posId] || []\n\n      const rewarderFarmsCoinTypes = farmsRewards.map((r: PosReward) => fixCoinType(r.token.coin_type))\n      const rewarderMiningCoinTypes = miningRewards.map((r: PosReward) => fixCoinType(r.token.coin_type))\n\n      const combinedCoinTypes = isClaimFarms ? [...rewarderFarmsCoinTypes, ...rewarderMiningCoinTypes] : rewarderMiningCoinTypes\n\n      const rewarderCoinTypes: string[] = Array.from(new Set(combinedCoinTypes))\n\n      const params: any = {\n        posType: positionInfo?.posType,\n        id,\n        clmmPool: positionInfo?.clmmPool,\n        coinTypeA: positionInfo?.coinTypeA,\n        coinTypeB: positionInfo?.coinTypeB,\n        rewarderCoinTypes,\n        account: currentAccount?.address\n      }\n\n      if (isClaimFarms) {\n        params['farmsPool'] = positionInfo?.farmsPool\n      }\n      console.log('üöÄ ~ toClaim ~ params:', rewarderCoinTypes, params)\n\n      const { tx, msafeParams } = await getPosClaimFeeAndRewardAndFarmsTxPayload(params)\n\n      const res = await signAndExecuteTransaction(\n        tx,\n        {\n          getShowInfo: (status: TransactionStatusType) => ({\n            modalDescriptionText: '',\n            toastTitleText: status === 'success' ? 'Claim Successful' : ''\n          })\n        },\n        { msafeParams }\n      )\n\n      if (res) {\n        const poolInfo = curPosContractPoolInfo || (await getPosPoolsOriginalObj([positionInfo as PosBaseInfo]))\n\n        console.log('üöÄ ~ toClaim ~ poolInfo:', poolInfo)\n\n        // Âª∂ËøüÂà∑Êñ∞Êï∞ÊçÆ\n        setTimeout(() => {\n          fetchAccountBalance()\n          if (isClaimFarms) getFarmsRewardsData([positionInfo as PosBaseInfo])\n          getPosFeeData([positionInfo as PosBaseInfo])\n          getPosRewardsData([positionInfo as PosBaseInfo], {\n            [poolInfo.poolAddress]: poolInfo\n          })\n          // getCurrentPosHistory(id, posId) // Â¶ÇÈúÄÂéÜÂè≤ËÆ∞ÂΩï\n        }, 2000)\n      }\n    } catch (error) {\n      console.error('üöÄ ~ toClaim ~ error:', error)\n    } finally {\n      setIsClaimLoading(false)\n    }\n  }\n\n  return {\n    toClaimPosition,\n    isClaimLoading\n  }\n}\n"],"names":["useBurn","burnSdk","useSdk","getBurnTxPayload","posBaseInfo","posId","clmmPool","coinTypeA","coinTypeB","params","getBurnClaimTxPayload","poolAddress","account","rewarderCoinTypes","txb","getCoinAmountFromLiquidity","lowerSqrtPrice","TickMath","upperSqrtPrice","result","ClmmPoolUtil","BN","coinAAmount","convertScientificToDecimal","_a","coinBAmount","_b","poolInfo","current_sqrt_price","positionList","totalA","d","totalB","i","position","tick_lower_index","tick_upper_index","liquidity","defaultCoinA","defaultCoinB","deleteOx","address","getTickDataFromUrlData","ticks","tickdatas","tick","td","asIntN","usePosClaimFeeAndReward","clmmSdk","farmsSdk","getHarvestFarmsTxPayload","useFarms","getPosClaimFeeAndRewardTxPayload","posType","id","tx","msafeParams","parameter","MsafeTransactionSubType","farmsPool","txf","posBaseList","posRewardsData","clmmHarvestParams","framsHavestParams","burnHavestParams","farmsParams","item","batchHarvestAndClmmFeeTx","burnRewardList","useClaimPosition","fetchAccountBalance","useAccountBalance","farmsPosRewardsData","usePositionStore","getPosFeeData","useGetPosfees","getPosRewardsData","useGetPosRewards","getFarmsRewardsData","useGetFarmsPosRewards","signAndExecuteTransaction","useTransaction","getPosClaimFeeAndRewardAndFarmsTxPayload","currentAccount","useAccountStore","isClaimLoading","setIsClaimLoading","useState","getPosPoolsOriginalObj","useGetPosPools","positionInfo","curPosContractPoolInfo","isClaimFarms","farmsRewards","miningRewards","rewarderFarmsCoinTypes","r","fixCoinType","rewarderMiningCoinTypes","combinedCoinTypes","status","error"],"mappings":"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"}