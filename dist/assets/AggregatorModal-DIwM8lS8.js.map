{"version":3,"mappings":"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","names":["isEqual","value","other","baseIsEqual","useTimeout","fn","delay","timerCallback","useMemoizedFn","timerRef","useRef","clear","useCallback","useEffect","isNumber","getSourceNum","providerList","acc","item","getCheckedNum","selected","subAcc","subItem","hiddenAggregators","AggregatorProvider","mergeAggregators","useCustomizeRouting","providersSwitchStates","setProvidersSwitchStates","useSwapConfigStore","providers","useWebConfigStore","currProvidersSwitchStates","setCurrProvidersSwitchStates","useState","otherProviderList","setOtherProviderList","dexProviderList","setDexProviderList","useDeepCompareEffect","groupedList","otherList","dexList","providersMap","provider","dex","AggregatorDexMap","groupDex","findGroupDex","list","key","a","b","AggregatorDexGroup","group","handleSelectAllProviderClick","selectAll","handleSelectAllDexProviderClick","handleSelectAllOtherProviderClick","handleProviderClick","select","selectAllDexProviders","useMemo","selectAllOtherProviders","selectAllProviders","isOpenAggregatorMode","handleSaveClick","allSourceNum","_a","dexSourceNumMap","otherSourceNumMap","AggregatorSwitch","props","isAnimated","setIsAnimated","jsx","Switch","ConfirmModal","isOpen","onOk","onClose","jsxs","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","HStack","Icon","Text","ModalFooter","Button","NumBox","num","total","SourceGrid","lazy","__vitePreload","AggregatorModeModal","confirmModalOpen","setConfirmModalOpen","handleClose","Fragment","VStack","TooltipIcon","d","Stack","Suspense","ListSkeleton","Divider","Grid","GridItem","Skeleton","memo"],"ignoreList":[0,1],"sources":["../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isEqual.js","../../../../node_modules/.pnpm/ahooks@3.8.4_react@18.3.1/node_modules/ahooks/es/useTimeout/index.js","../../src/hooks/swap/useCustomizeRouting.ts","../../src/components/swap/AggregatorMode/AggregatorSwitch.tsx","../../src/components/swap/AggregatorMode/ConfirmModal.tsx","../../src/components/swap/AggregatorMode/NumBox.tsx","../../src/components/swap/AggregatorMode/AggregatorModal.tsx"],"sourcesContent":["import baseIsEqual from './_baseIsEqual.js';\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nexport default isEqual;\n","import { useCallback, useEffect, useRef } from 'react';\nimport useMemoizedFn from '../useMemoizedFn';\nimport { isNumber } from '../utils';\nvar useTimeout = function (fn, delay) {\n  var timerCallback = useMemoizedFn(fn);\n  var timerRef = useRef(null);\n  var clear = useCallback(function () {\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n    }\n  }, []);\n  useEffect(function () {\n    if (!isNumber(delay) || delay < 0) {\n      return;\n    }\n    timerRef.current = setTimeout(timerCallback, delay);\n    return clear;\n  }, [delay]);\n  return clear;\n};\nexport default useTimeout;","import { AggregatorDexGroup, AggregatorDexMap } from '@/config/aggregator'\nimport useSwapConfigStore from '@/store/swap/swapConfig'\nimport { AggregatorDex, AggregatorProvider } from '@/types/swap'\nimport useWebConfigStore from '@cetus/stores/src/useWebConfigStore'\nimport { useDeepCompareEffect } from 'ahooks'\nimport { useMemo, useState } from 'react'\n\nconst getSourceNum = (providerList: AggregatorDex[]) => {\n  return providerList.reduce((acc, item) => {\n    return acc + (item?.subItems ? item.subItems.length : 1)\n  }, 0)\n}\n\nconst getCheckedNum = (providerList: AggregatorDex[], selected: Partial<Record<AggregatorProvider, boolean>>) => {\n  return providerList.reduce((acc, item) => {\n    if (item?.subItems) {\n      return (\n        acc +\n        item.subItems.reduce((subAcc, subItem) => {\n          return subAcc + ((selected as any)[subItem.id] ? 1 : 0)\n        }, 0)\n      )\n    }\n    return acc + ((selected as any)[item.id] ? 1 : 0)\n  }, 0)\n}\n\n// HAWAL与HAEDAL LSD同步，单独处理\n// STEAMM_OMM_V2 和STEAMM_OMM同步，单独处理\nconst hiddenAggregators = [AggregatorProvider.HAWAL, AggregatorProvider.STEAMM_OMM_V2]\nconst mergeAggregators = [\n  {\n    parent: AggregatorProvider.HAEDAL,\n    child: AggregatorProvider.HAWAL\n  },\n  {\n    parent: AggregatorProvider.STEAMM_OMM,\n    child: AggregatorProvider.STEAMM_OMM_V2\n  }\n]\nexport default function useCustomizeRouting() {\n  const { providersSwitchStates, setProvidersSwitchStates } = useSwapConfigStore()\n  const { providers } = useWebConfigStore()\n  const [currProvidersSwitchStates, setCurrProvidersSwitchStates] = useState<Partial<Record<AggregatorProvider, boolean>>>({\n    ...providersSwitchStates\n  })\n  // 其他Provider 列表\n  const [otherProviderList, setOtherProviderList] = useState<AggregatorDex[]>([])\n  // Dex Provider 列表\n  const [dexProviderList, setDexProviderList] = useState<AggregatorDex[]>([])\n  useDeepCompareEffect(() => {\n    setCurrProvidersSwitchStates({ ...providersSwitchStates })\n  }, [providersSwitchStates])\n\n  // 初始化UI显示列表， 并分组\n  useDeepCompareEffect(() => {\n    const groupedList: Record<string, AggregatorDex[]> = {}\n    const otherList: AggregatorDex[] = []\n    const dexList: AggregatorDex[] = []\n\n    const providersMap: Partial<Record<AggregatorProvider, boolean>> = {}\n    // const newProviders = providers.filter(item => item !== 'VOLO')\n    const newProviders = providers.filter(item => !hiddenAggregators.includes(item as AggregatorProvider))\n    newProviders.forEach(provider => {\n      const dex = AggregatorDexMap[provider]\n      if (dex) {\n        const selected = providersSwitchStates[dex.id as AggregatorProvider]\n\n        // 初始化时 如果用户没设置过，则默认选中\n        if (selected === undefined) {\n          providersMap[dex.id as AggregatorProvider] = true\n        } else {\n          providersMap[dex.id as AggregatorProvider] = selected\n        }\n\n        const groupDex = findGroupDex(provider as AggregatorProvider)\n        if (groupDex) {\n          //找到分组 暂存groupedList\n          const list = groupedList[groupDex.groupName] || []\n          list.push(dex)\n          groupedList[groupDex.groupName] = list\n        } else {\n          if (dex.type === 'dex') {\n            dexList.push(dex)\n          } else {\n            otherList.push(dex)\n          }\n        }\n      } else {\n        //TODO 本地配置没找到 如何处理？\n      }\n    })\n    // 处理完毕，将分组数据 放入对应List中\n    for (const [key, value] of Object.entries(groupedList)) {\n      if (value.length > 0) {\n        const dex = value[0]\n        const groupDex: AggregatorDex = {\n          ...dex,\n          id: dex.groupId as string,\n          name: key, // 修改分组显示的name\n          subItems: value.sort((a, b) => b.sort - a.sort)\n        }\n\n        if (dex.type === 'dex') {\n          dexList.push(groupDex)\n        } else {\n          otherList.push(groupDex)\n        }\n      }\n    }\n    // 所有数据处理完毕，进行排序\n    otherList.sort((a, b) => b.sort - a.sort)\n    dexList.sort((a, b) => b.sort - a.sort)\n    setOtherProviderList([...otherList])\n    setDexProviderList([...dexList])\n    setProvidersSwitchStates(providersMap)\n  }, [providers])\n\n  const findGroupDex = (provider: AggregatorProvider) => {\n    return AggregatorDexGroup.find(group => group.items.includes(provider))\n  }\n\n  /**\n   * 处理选择全部Provider点击\n   * @param selectAll\n   */\n  const handleSelectAllProviderClick = (selectAll: boolean) => {\n    if (selectAll) {\n      const providersMap: Partial<Record<AggregatorProvider, boolean>> = {}\n      providers.forEach(item => (providersMap[item as AggregatorProvider] = true))\n\n      hiddenAggregators.forEach(item => {\n        if (providers.includes(item)) {\n          providersMap[item] = true\n        }\n      })\n\n      setCurrProvidersSwitchStates(providersMap)\n    } else {\n      const providersMap: Partial<Record<AggregatorProvider, boolean>> = {}\n      providers.forEach(item => (providersMap[item as AggregatorProvider] = false))\n\n      hiddenAggregators.forEach(item => {\n        if (providers.includes(item)) {\n          providersMap[item] = false\n        }\n      })\n\n      setCurrProvidersSwitchStates({\n        ...providersMap,\n        [AggregatorProvider.CETUS]: true\n      })\n    }\n  }\n\n  /**\n   * 处理选择全部Dex Provider点击\n   * @param selectAll\n   */\n  const handleSelectAllDexProviderClick = (selectAll: boolean) => {\n    if (selectAll) {\n      dexProviderList.forEach(item => {\n        if (item?.subItems) {\n          item.subItems.forEach(subItem => {\n            currProvidersSwitchStates[subItem.id as AggregatorProvider] = true\n          })\n        } else {\n          currProvidersSwitchStates[item.id as AggregatorProvider] = true\n        }\n      })\n    } else {\n      dexProviderList.forEach(item => {\n        if (item.id === AggregatorProvider.CETUS) {\n          currProvidersSwitchStates[item.id] = true\n        } else if (item?.subItems) {\n          item.subItems.forEach(subItem => {\n            currProvidersSwitchStates[subItem.id as AggregatorProvider] = false\n          })\n        } else {\n          currProvidersSwitchStates[item.id as AggregatorProvider] = false\n        }\n      })\n    }\n\n    setCurrProvidersSwitchStates({\n      ...currProvidersSwitchStates\n    })\n  }\n\n  /**\n   * 处理选择全部Other Provider点击\n   * @param selectAll\n   */\n  const handleSelectAllOtherProviderClick = (selectAll: boolean) => {\n    otherProviderList.forEach(item => {\n      if (item?.subItems) {\n        item.subItems.forEach(subItem => {\n          currProvidersSwitchStates[subItem.id as AggregatorProvider] = selectAll\n        })\n      } else {\n        currProvidersSwitchStates[item.id as AggregatorProvider] = selectAll\n      }\n    })\n\n    // HAWAL与HAEDAL LSD同步，单独处理\n\n    hiddenAggregators.forEach(item => {\n      if (providers.includes(item)) {\n        currProvidersSwitchStates[item] = selectAll\n      }\n    })\n\n    setCurrProvidersSwitchStates({\n      ...currProvidersSwitchStates\n    })\n  }\n\n  /**\n   * 单个Provider点击\n   * @param provider\n   * @param select\n   */\n  const handleProviderClick = (provider: AggregatorProvider, select: boolean) => {\n    currProvidersSwitchStates[provider] = select\n\n    mergeAggregators.forEach(item => {\n      if (provider === item.parent && providers.includes(item.child)) {\n        currProvidersSwitchStates[item.child] = select\n      }\n    })\n\n    setCurrProvidersSwitchStates({ ...currProvidersSwitchStates })\n  }\n\n  // 是否选择全部Dex\n  const selectAllDexProviders = useMemo(\n    () =>\n      dexProviderList.every(item => {\n        if (item?.subItems) {\n          return item.subItems.every(subItem => currProvidersSwitchStates[subItem.id as AggregatorProvider])\n        }\n        return currProvidersSwitchStates[item.id as AggregatorProvider]\n      }),\n    [JSON.stringify(dexProviderList), JSON.stringify(currProvidersSwitchStates)]\n  )\n  // 是否选择全部Other\n  const selectAllOtherProviders = useMemo(\n    () =>\n      otherProviderList.every(item => {\n        if (item?.subItems) {\n          return item.subItems.every(subItem => currProvidersSwitchStates[subItem.id as AggregatorProvider])\n        }\n        return currProvidersSwitchStates[item.id as AggregatorProvider]\n      }),\n    [JSON.stringify(otherProviderList), JSON.stringify(currProvidersSwitchStates)]\n  )\n\n  // 是否选择全部Providers\n  const selectAllProviders = useMemo(() => {\n    return selectAllDexProviders && selectAllOtherProviders\n  }, [selectAllDexProviders, selectAllOtherProviders])\n\n  // 是否打开了AggregatorMode\n  const isOpenAggregatorMode = useMemo(() => {\n    return (\n      providers?.filter(item => {\n        return item !== AggregatorProvider.CETUS && !!currProvidersSwitchStates[item as AggregatorProvider]\n      }).length >= 1\n    )\n  }, [currProvidersSwitchStates, providers])\n  // 点击保存确认\n  const handleSaveClick = () => {\n    setProvidersSwitchStates({ ...currProvidersSwitchStates })\n  }\n\n  const allSourceNum = useMemo(() => {\n    return providers?.filter(item => !hiddenAggregators.includes(item as AggregatorProvider))?.length\n  }, [providers?.length])\n\n  const dexSourceNumMap = useMemo(() => {\n    return {\n      checked: getCheckedNum(dexProviderList, currProvidersSwitchStates),\n      total: getSourceNum(dexProviderList)\n    }\n  }, [dexProviderList, currProvidersSwitchStates])\n\n  const otherSourceNumMap = useMemo(() => {\n    return {\n      checked: getCheckedNum(otherProviderList, currProvidersSwitchStates),\n      total: getSourceNum(otherProviderList)\n    }\n  }, [otherProviderList, currProvidersSwitchStates])\n\n  return {\n    handleSelectAllProviderClick,\n    handleSelectAllDexProviderClick,\n    handleSelectAllOtherProviderClick,\n    handleProviderClick,\n    selectAllProviders,\n    selectAllDexProviders,\n    otherProviderList,\n    selectAllOtherProviders,\n    dexProviderList,\n    currProvidersSwitchStates,\n    providersSwitchStates,\n    isOpenAggregatorMode,\n    handleSaveClick,\n    allSourceNum,\n    dexSourceNumMap,\n    otherSourceNumMap\n  }\n}\n","import { Switch, SwitchProps } from '@chakra-ui/react'\nimport { useTimeout } from 'ahooks'\nimport { useEffect, useState } from 'react'\n\nfunction AggregatorSwitch(props: SwitchProps) {\n  const [isAnimated, setIsAnimated] = useState(false)\n\n  const clear = useTimeout(() => {\n    setIsAnimated(true)\n  }, 300)\n  useEffect(() => {\n    return () => clear()\n  }, [])\n  return (\n    <Switch\n      sx={{\n        '.chakra-switch__track': {\n          p: '0px',\n          transitionDuration: isAnimated ? 'var(--chakra-transition-duration-fast) !important' : '0s'\n        },\n        '.chakra-switch__thumb': {\n          transitionDuration: isAnimated ? 'var(--chakra-transition-duration-normal) !important' : '0s'\n        }\n      }}\n      {...props}\n    />\n  )\n}\n\nexport default AggregatorSwitch\n","import { Icon } from '@cetus/ui-kit'\nimport { Button, HStack, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react'\n\ninterface ConfirmModalProps {\n  isOpen: boolean\n  onOk: () => void\n  onClose: () => void\n}\n\nfunction ConfirmModal({ isOpen, onOk, onClose }: ConfirmModalProps) {\n  return (\n    <Modal autoFocus={false} returnFocusOnClose={false} isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Tips</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <HStack>\n            <Icon xlinkHref=\"#icon-icon_tips\" svgHover=\"text_paragraph\" cursor=\"default\" />\n            <Text color=\"text_caption\">Do you want to save your changes?</Text>\n          </HStack>\n        </ModalBody>\n\n        <ModalFooter gap=\"16px\">\n          <Button flex=\"1\" onClick={onOk} h=\"40px\" borderRadius=\"8px\">\n            Confirm\n          </Button>\n          <Button flex=\"1\" variant=\"outline\" h=\"40px\" borderRadius=\"8px\" onClick={onClose}>\n            No\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  )\n}\n\nexport default ConfirmModal\n","import { HStack, Text } from '@chakra-ui/react'\n\ntype NumBoxProps = {\n  num: number\n  total?: number\n}\n\nfunction NumBox({ num, total }: NumBoxProps) {\n  return (\n    <HStack h=\"16px\" lineHeight=\"16px\" p=\"2px 8px\" borderRadius=\"8px\" bg=\"aggregator_switch\" gap=\"0px\">\n      <Text as=\"div\" display=\"inline-block\" fontSize=\"10px\" h=\"10px\" lineHeight=\"10px\" color=\"primary\">\n        {num}&nbsp;\n      </Text>\n      {total !== undefined && (\n        <Text as=\"div\" display=\"inline-block\" fontSize=\"10px\" h=\"10px\" lineHeight=\"10px\" color=\"text_paragraph\">\n          / {total}\n        </Text>\n      )}\n    </HStack>\n  )\n}\n\nexport default NumBox\n","import useCustomizeRouting from '@/hooks/swap/useCustomizeRouting'\nimport { TooltipIcon } from '@cetus/design'\nimport { Icon } from '@cetus/ui-kit'\nimport { d } from '@cetusprotocol/common-sdk'\nimport {\n  Button,\n  Divider,\n  Grid,\n  GridItem,\n  HStack,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Skeleton,\n  Stack,\n  Text,\n  VStack\n} from '@chakra-ui/react'\nimport { isEqual } from 'lodash-es'\nimport { lazy, memo, Suspense, useState } from 'react'\nimport AggregatorSwitch from './AggregatorSwitch'\nimport ConfirmModal from './ConfirmModal'\nimport NumBox from './NumBox'\nconst SourceGrid = lazy(() => import('./SourceGrid'))\n\ninterface AggregatorModeProps {\n  isOpen: boolean\n  onClose(): void\n}\n\nconst AggregatorModeModal = ({ isOpen, onClose }: AggregatorModeProps) => {\n  const [confirmModalOpen, setConfirmModalOpen] = useState(false)\n\n  const {\n    handleSelectAllProviderClick,\n    handleSelectAllDexProviderClick,\n    handleSelectAllOtherProviderClick,\n    handleProviderClick,\n    selectAllProviders,\n    selectAllDexProviders,\n    otherProviderList,\n    selectAllOtherProviders,\n    dexProviderList,\n    currProvidersSwitchStates,\n    providersSwitchStates,\n    handleSaveClick,\n    allSourceNum,\n    dexSourceNumMap,\n    otherSourceNumMap\n  } = useCustomizeRouting()\n  const handleClose = () => {\n    if (isEqual(providersSwitchStates, currProvidersSwitchStates)) {\n      onClose()\n    } else {\n      setConfirmModalOpen(true)\n    }\n  }\n  return (\n    <>\n      <Modal autoFocus={false} returnFocusOnClose={false} isOpen={isOpen} onClose={handleClose} isCentered>\n        <ModalOverlay />\n        <ModalContent bg=\"background\" w={{ base: 'calc(100vw - 16px)', lg: '540px' }} maxW=\"unset\">\n          <ModalHeader>\n            <HStack w=\"100%\" justify=\"space-between\">\n              <Text fontSize=\"16px\" fontWeight=\"500\" color=\"text_caption\">\n                Aggregator Settings\n              </Text>\n              <Icon xlinkHref=\"#icon-icon_close\" onClick={handleClose} />\n            </HStack>\n          </ModalHeader>\n\n          <ModalBody>\n            <VStack w=\"100%\" gap=\"24px\">\n              <HStack w=\"100%\" justify=\"space-between\" align=\"flex-end\">\n                <VStack w=\"100%\" gap=\"8px\" align=\"flex-start\">\n                  <HStack gap=\"4px\">\n                    <Text fontSize=\"16px\" color=\"text_caption\" fontWeight=\"500\">\n                      Liquidity Sources\n                    </Text>\n                    <TooltipIcon type=\"liquiditySources\" />\n                  </HStack>\n                  <Text lineHeight={{ base: '12px', lg: '16px' }} fontSize={{ base: '12px', lg: '16px' }}>\n                    Disable/Enable Liquidity Sources\n                  </Text>\n                </VStack>\n                <VStack align=\"flex-end\" flex=\"0 0 108px\">\n                  <Text>Select all</Text>\n                  <HStack justifyContent=\"flex-end\" h=\"16px\" gap=\"4px\">\n                    <NumBox\n                      num={d(dexSourceNumMap?.checked || 0)\n                        .plus(otherSourceNumMap?.checked || 0)\n                        .toNumber()}\n                      total={allSourceNum}\n                    />\n                    <AggregatorSwitch\n                      id=\"select-all\"\n                      isChecked={!!selectAllProviders}\n                      onChange={() => handleSelectAllProviderClick(!selectAllProviders)}\n                    />\n                  </HStack>\n                </VStack>\n              </HStack>\n              <Stack\n                flexDir=\"column\"\n                w=\"100%\"\n                p=\"0\"\n                gap=\"20px\"\n                align=\"flex-start\"\n                maxH={{ base: 'calc(100vh - 280px)', lg: '600px' }}\n                overflow=\"hidden\"\n              >\n                <Suspense fallback={<ListSkeleton />}>\n                  <SourceGrid\n                    title=\"Dex\"\n                    isAllChecked={selectAllDexProviders}\n                    onAllSelect={() => handleSelectAllDexProviderClick(!selectAllDexProviders)}\n                    onItemSelect={handleProviderClick}\n                    list={dexProviderList}\n                    checkedMap={currProvidersSwitchStates}\n                    totalNum={dexSourceNumMap?.total}\n                    checkedNum={dexSourceNumMap?.checked}\n                  />\n                </Suspense>\n                <Divider orientation=\"horizontal\" />\n                <Suspense fallback={<ListSkeleton />}>\n                  <SourceGrid\n                    title=\"Other\"\n                    isAllChecked={selectAllOtherProviders}\n                    onAllSelect={() => handleSelectAllOtherProviderClick(!selectAllOtherProviders)}\n                    onItemSelect={handleProviderClick}\n                    list={otherProviderList}\n                    checkedMap={currProvidersSwitchStates}\n                    totalNum={otherSourceNumMap?.total}\n                    checkedNum={otherSourceNumMap?.checked}\n                  />\n                </Suspense>\n              </Stack>\n            </VStack>\n          </ModalBody>\n\n          <ModalFooter gap=\"16px\" p=\"8px 16px 16px\">\n            <Button flex=\"1\" variant=\"outline\" p=\"0 15px\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button\n              flex=\"1\"\n              onClick={() => {\n                handleSaveClick()\n                onClose()\n              }}\n            >\n              Save\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n      {confirmModalOpen && (\n        <ConfirmModal\n          isOpen={confirmModalOpen}\n          onClose={() => {\n            setConfirmModalOpen(false)\n            onClose()\n          }}\n          onOk={() => {\n            handleSaveClick()\n            setConfirmModalOpen(false)\n            onClose()\n          }}\n        />\n      )}\n    </>\n  )\n}\n\nfunction ListSkeleton() {\n  return (\n    <Grid\n      w=\"100%\"\n      templateColumns={{ base: 'repeat(2, 1fr)', lg: 'repeat(3, 1fr)' }}\n      maxH={{ base: 'unset', lg: '152px' }}\n      overflow=\"scroll\"\n      gap=\"8px\"\n    >\n      {[1, 2, 3, 4, 5, 6, 7, 8, 9]?.map(item => (\n        <GridItem key={item}>\n          <Skeleton w=\"100%\" h=\"36px\" />\n        </GridItem>\n      ))}\n    </Grid>\n  )\n}\n\nexport default memo(AggregatorModeModal)\n"],"file":"assets/AggregatorModal-DIwM8lS8.js"}