<<<<<<< HEAD:dist/assets/ConnectButton-CgbMPSPS.js.map
{"version":3,"file":"ConnectButton-CgbMPSPS.js","sources":["../../../cetus-design/src/components/wallet/provider/usePhantomAutoConnect.ts","../../../cetus-design/src/components/wallet/ConnectButton.tsx"],"sourcesContent":["import useGlobalStore from '@cetus/stores/src/global'\nimport { useConnectWallet, useWallets } from '@mysten/dapp-kit'\nimport { useEffect } from 'react'\n\nexport default function usePhantomAutoConnect() {\n  const { phantomInstance } = useGlobalStore()\n  const { mutate: connect } = useConnectWallet()\n  const supportWalletList = useWallets()\n\n  const autoConnectPhantom = () => {\n    const suiDappKitLocalData = JSON.parse(window?.localStorage?.getItem('sui-dapp-kit:wallet-connection-info') || '{}')\n    const lastConnectedWalletName = suiDappKitLocalData?.state?.lastConnectedWalletName\n\n    if (lastConnectedWalletName === 'Phantom') {\n      const walletObj = supportWalletList.find(item => item.name === 'Phantom')\n      if (walletObj) {\n        connect({ wallet: walletObj })\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (phantomInstance) {\n      autoConnectPhantom()\n    }\n  }, [phantomInstance])\n}\n","import { useAccountServiceName } from '@cetus/hooks/src/useAccountServiceName'\nimport useExplorer from '@cetus/hooks/src/useExplorer'\nimport useTrack from '@cetus/hooks/src/useTrack'\nimport useWindowWidth from '@cetus/hooks/src/useWindowWidth'\nimport { useSdkStore } from '@cetus/sdk-factory'\nimport { useAccountStore } from '@cetus/stores'\nimport useGlobalStore from '@cetus/stores/src/global'\nimport useRpcConfigStore from '@cetus/stores/src/useRpcConfigStore'\nimport { suiWalletList } from '@cetus/types'\nimport Icon from '@cetus/ui-kit/src/components/Icon'\nimport { addressAbridge } from '@cetus/utils'\nimport { Button, HStack, Image, Popover, PopoverContent, PopoverTrigger, Text, useDisclosure, VStack } from '@chakra-ui/react'\nimport { useCurrentAccount, useCurrentWallet, useDisconnectWallet } from '@mysten/dapp-kit'\nimport { useEffect, useMemo, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useAccountBalance } from '../../../../hooks/src/useAccountBalance'\nimport { CopyButton } from '../common'\nimport AccountSwitch from './AccountSwitch'\nimport RecentTransactions from './RecentTransactions'\nimport usePhantomAutoConnect from './provider/usePhantomAutoConnect'\n\nexport default function ConnectButton({ isCetusPump }: { isCetusPump: boolean }) {\n  usePhantomAutoConnect()\n  const [isOpenRecentTrans, setIsOpenRecentTrans] = useState<boolean>(false)\n  const { currentAccount, accounts, onWalletModal, saveAccounts } = useAccountStore()\n  const { currentWallet, connectionStatus } = useCurrentWallet()\n  const account = useCurrentAccount()\n  const { mutate: disconnect } = useDisconnectWallet()\n  const { getExplorerUrl } = useExplorer()\n  const { isApp } = useWindowWidth()\n  const navigate = useNavigate()\n  const { fetchAccountBalance } = useAccountBalance()\n  const { isOpen, onToggle, onClose } = useDisclosure()\n  const { currentNode } = useRpcConfigStore()\n  const { fetchServiceNames } = useAccountServiceName()\n  const { phantomInstance } = useGlobalStore()\n  const { toTrackWalletConnect } = useTrack()\n  const { isInitialized } = useSdkStore()\n\n  const { saveCurrentAccount, accountServiceNameObj, setAccountServiceNameObj } = useAccountStore()\n\n  // 保存当前钱包账户\n  useEffect(() => {\n    // TODO  全局修改钱包账户地址。用于读取数据测试\n    // const testAccount = {\n    //   address: '0xd2d8837070eaae97308d219d080cb521a9cfa594f37f683aa5418828b9ffa2b6',\n    //   publicKey: [],\n    //   chains: ['sui:mainnet']\n    // }\n    // saveCurrentAccount(testAccount as any)\n\n    saveCurrentAccount(account || undefined)\n\n    if (account) {\n      fetchServiceNames([account.address])\n    }\n\n    if (account && isInitialized) {\n      fetchAccountBalance(account.address, true)\n    }\n  }, [account, isInitialized])\n\n  useEffect(() => {\n    const accounts = currentWallet?.accounts || []\n    saveAccounts([...accounts])\n  }, [currentWallet])\n\n  useEffect(() => {\n    if (account?.address && currentWallet?.name) {\n      toTrackWalletConnect({\n        walletAddress: account?.address,\n        walletName: currentWallet?.name\n      })\n    }\n  }, [account?.address, currentWallet?.name])\n\n  const walletIcon = useMemo(() => {\n    if (currentWallet) {\n      const info = suiWalletList.find(wallet => currentWallet.name === wallet.walletName)\n      if (info) {\n        return info.icon.startsWith('http') ? info.icon : `/images/wallet/${info.icon}.png`\n      }\n      return currentWallet.icon\n    }\n    return undefined\n  }, [currentWallet])\n\n  return (\n    <HStack>\n      {!currentAccount && (\n        <Button\n          borderRadius=\"8px\"\n          fontSize=\"14px\"\n          // w=\"136px\"\n          p=\"0 16px\"\n          h=\"36px\"\n          fontWeight=\"500\"\n          onClick={() => {\n            onWalletModal(true)\n            onClose()\n          }}\n        >\n          Connect\n        </Button>\n      )}\n\n      {currentAccount && (\n        <Popover isLazy isOpen={isOpen} onClose={onClose}>\n          <PopoverTrigger>\n            <Button\n              variant=\"unstyled\"\n              display=\"flex\"\n              gap=\"8px\"\n              cursor=\"pointer\"\n              borderRadius=\"8px\"\n              border=\"1px solid\"\n              borderColor=\"border\"\n              p={{ base: '0 8px', lg: '0 16px' }}\n              bg=\"block_color_opacity.50\"\n              backdropFilter=\"blur(20px)\"\n              h=\"36px\"\n              sx={{\n                _hover: {\n                  bg: 'button_outline_hov_bg'\n                }\n              }}\n              onClick={onToggle}\n            >\n              <Image src={walletIcon} alt=\"SVG Image\" boxSize=\"20px\" objectFit=\"cover\" borderRadius=\"4px\" />\n              <Text fontSize=\"14px\" color=\"text_caption\" fontWeight=\"500\">\n                {accountServiceNameObj?.[currentAccount.address] || addressAbridge(currentAccount.address)}\n              </Text>\n            </Button>\n          </PopoverTrigger>\n          {(isOpenRecentTrans ? true : isOpen) && (\n            <PopoverContent w=\"360px\" bg=\"bg_secondary\" borderRadius=\"12px\" p=\"0px\">\n              <VStack alignItems=\"start\" p=\"16px\" w=\"100%\">\n                <Text fontSize=\"14px\" color=\"text_caption\">\n                  Connected with {currentWallet?.name}\n                </Text>\n                <VStack\n                  mt=\"8px\"\n                  w=\"100%\"\n                  p=\"20px\"\n                  borderRadius=\"12px\"\n                  alignItems=\"start\"\n                  sx={{\n                    backgroundImage: \"url('/images/bg@2x.png')\",\n                    backgroundPosition: 'top 0px',\n                    backgroundSize: '328px 116px',\n                    backgroundRepeat: 'no-repeat'\n                  }}\n                >\n                  <HStack gap=\"8px\">\n                    <Image src={walletIcon} alt=\"SVG Image\" boxSize=\"30px\" objectFit=\"cover\" borderRadius=\"8px\" />\n                    <Text fontSize=\"14px\" fontWeight=\"500\">\n                      {currentAccount?.label}\n                    </Text>\n                  </HStack>\n\n                  <HStack w=\"100%\" justifyContent=\"space-between\" alignItems=\"center\" mt=\"8px\">\n                    {/* 展示钱包地址 */}\n                    <AccountSwitch currentAccount={currentAccount} accounts={accounts} onClose={onClose} />\n                    {/* 拷贝和跳转 */}\n                    <HStack gap=\"4px\">\n                      <CopyButton svgW=\"24px\" svgH=\"24px\" text={currentAccount.address} />\n                      <Icon\n                        xlinkHref=\"#icon-icon_link1\"\n                        w=\"24px\"\n                        h=\"24px\"\n                        svgW=\"24px\"\n                        svgH=\"24px\"\n                        onClick={() => {\n                          window.open(getExplorerUrl(currentAccount.address), '_blank')\n                        }}\n                      />\n                    </HStack>\n                  </HStack>\n                </VStack>\n\n                {isCetusPump && (\n                  <Button\n                    variant=\"outline\"\n                    fontSize=\"14px\"\n                    w=\"100%\"\n                    mt=\"12px\"\n                    onClick={() => {\n                      onClose()\n                      navigate(`/portfolio`)\n                    }}\n                  >\n                    Profile\n                  </Button>\n                )}\n\n                <HStack w=\"100%\" mt=\"8px\">\n                  {/* 最近交易记录 */}\n                  <HStack\n                    cursor=\"pointer\"\n                    sx={{\n                      _hover: {\n                        p: {\n                          color: 'text_caption'\n                        },\n                        svg: {\n                          fill: 'text_caption'\n                        }\n                      }\n                    }}\n                    onClick={() => {\n                      setIsOpenRecentTrans(true)\n                    }}\n                  >\n                    <Icon xlinkHref=\"#icon-icon_recenttransactions\" svgW=\"20px\" svgH=\"20px\" />\n                    <Text>Recent Transactions</Text>\n                  </HStack>\n\n                  {/* 断开链接 */}\n                  <HStack\n                    pl=\"16px\"\n                    cursor=\"pointer\"\n                    sx={{\n                      _hover: {\n                        p: {\n                          color: 'text_caption'\n                        },\n                        svg: {\n                          fill: 'text_caption'\n                        }\n                      }\n                    }}\n                    onClick={() => {\n                      disconnect()\n                      if (phantomInstance) {\n                        phantomInstance.hide()\n                      }\n\n                      onClose()\n                    }}\n                  >\n                    <Icon xlinkHref=\"#icon-icon_disconnect\" svgW=\"20px\" svgH=\"20px\" svgHover=\"text_paragraph\" />\n                    <Text>Disconnect</Text>\n                  </HStack>\n                </HStack>\n              </VStack>\n            </PopoverContent>\n          )}\n        </Popover>\n      )}\n      {isOpenRecentTrans && <RecentTransactions isOpen={isOpenRecentTrans} onClose={() => setIsOpenRecentTrans(false)} />}\n    </HStack>\n  )\n}\n"],"names":["usePhantomAutoConnect","phantomInstance","useGlobalStore","connect","useConnectWallet","supportWalletList","useWallets","autoConnectPhantom","suiDappKitLocalData","_a","_b","walletObj","item","useEffect","ConnectButton","isCetusPump","isOpenRecentTrans","setIsOpenRecentTrans","useState","currentAccount","accounts","onWalletModal","saveAccounts","useAccountStore","currentWallet","connectionStatus","useCurrentWallet","account","useCurrentAccount","disconnect","useDisconnectWallet","getExplorerUrl","useExplorer","useWindowWidth","navigate","useNavigate","fetchAccountBalance","useAccountBalance","isOpen","onToggle","onClose","useDisclosure","currentNode","useRpcConfigStore","fetchServiceNames","useAccountServiceName","toTrackWalletConnect","useTrack","isInitialized","useSdkStore","saveCurrentAccount","accountServiceNameObj","setAccountServiceNameObj","walletIcon","useMemo","info","suiWalletList","wallet","HStack","jsx","Button","jsxs","Popover","PopoverTrigger","Image","Text","addressAbridge","PopoverContent","VStack","AccountSwitch","CopyButton","Icon","RecentTransactions"],"mappings":"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"}
=======
{"version":3,"file":"ConnectButton-B9OylJz4.js","sources":["../../../cetus-design/src/components/wallet/provider/usePhantomAutoConnect.ts","../../../cetus-design/src/components/wallet/ConnectButton.tsx"],"sourcesContent":["import useGlobalStore from '@cetus/stores/src/global'\nimport { useConnectWallet, useWallets } from '@mysten/dapp-kit'\nimport { useEffect } from 'react'\n\nexport default function usePhantomAutoConnect() {\n  const { phantomInstance } = useGlobalStore()\n  const { mutate: connect } = useConnectWallet()\n  const supportWalletList = useWallets()\n\n  const autoConnectPhantom = () => {\n    const suiDappKitLocalData = JSON.parse(window?.localStorage?.getItem('sui-dapp-kit:wallet-connection-info') || '{}')\n    const lastConnectedWalletName = suiDappKitLocalData?.state?.lastConnectedWalletName\n\n    if (lastConnectedWalletName === 'Phantom') {\n      const walletObj = supportWalletList.find(item => item.name === 'Phantom')\n      if (walletObj) {\n        connect({ wallet: walletObj })\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (phantomInstance) {\n      autoConnectPhantom()\n    }\n  }, [phantomInstance])\n}\n","import { useAccountServiceName } from '@cetus/hooks/src/useAccountServiceName'\nimport useExplorer from '@cetus/hooks/src/useExplorer'\nimport useTrack from '@cetus/hooks/src/useTrack'\nimport useWindowWidth from '@cetus/hooks/src/useWindowWidth'\nimport { useSdkStore } from '@cetus/sdk-factory'\nimport { useAccountStore } from '@cetus/stores'\nimport useGlobalStore from '@cetus/stores/src/global'\nimport useRpcConfigStore from '@cetus/stores/src/useRpcConfigStore'\nimport { suiWalletList } from '@cetus/types'\nimport Icon from '@cetus/ui-kit/src/components/Icon'\nimport { addressAbridge } from '@cetus/utils'\nimport { Button, HStack, Image, Popover, PopoverContent, PopoverTrigger, Text, useDisclosure, VStack } from '@chakra-ui/react'\nimport { useCurrentAccount, useCurrentWallet, useDisconnectWallet } from '@mysten/dapp-kit'\nimport { useEffect, useMemo, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useAccountBalance } from '../../../../hooks/src/useAccountBalance'\nimport { CopyButton } from '../common'\nimport AccountSwitch from './AccountSwitch'\nimport RecentTransactions from './RecentTransactions'\nimport usePhantomAutoConnect from './provider/usePhantomAutoConnect'\n\nexport default function ConnectButton({ isCetusPump }: { isCetusPump: boolean }) {\n  usePhantomAutoConnect()\n  const [isOpenRecentTrans, setIsOpenRecentTrans] = useState<boolean>(false)\n  const { currentAccount, accounts, onWalletModal, saveAccounts } = useAccountStore()\n  const { currentWallet, connectionStatus } = useCurrentWallet()\n  const account = useCurrentAccount()\n  const { mutate: disconnect } = useDisconnectWallet()\n  const { getExplorerUrl } = useExplorer()\n  const { isApp } = useWindowWidth()\n  const navigate = useNavigate()\n  const { fetchAccountBalance } = useAccountBalance()\n  const { isOpen, onToggle, onClose } = useDisclosure()\n  const { currentNode } = useRpcConfigStore()\n  const { fetchServiceNames } = useAccountServiceName()\n  const { phantomInstance } = useGlobalStore()\n  const { toTrackWalletConnect } = useTrack()\n  const { isInitialized } = useSdkStore()\n\n  const { saveCurrentAccount, accountServiceNameObj, setAccountServiceNameObj } = useAccountStore()\n\n  // 保存当前钱包账户\n  useEffect(() => {\n    // TODO  全局修改钱包账户地址。用于读取数据测试\n    // const testAccount = {\n    //   address: '0xd2d8837070eaae97308d219d080cb521a9cfa594f37f683aa5418828b9ffa2b6',\n    //   publicKey: [],\n    //   chains: ['sui:mainnet']\n    // }\n    // saveCurrentAccount(testAccount as any)\n\n    saveCurrentAccount(account || undefined)\n\n    if (account) {\n      fetchServiceNames([account.address])\n    }\n\n    if (account && isInitialized) {\n      fetchAccountBalance(account.address, true)\n    }\n  }, [account, isInitialized])\n\n  useEffect(() => {\n    const accounts = currentWallet?.accounts || []\n    saveAccounts([...accounts])\n  }, [currentWallet])\n\n  useEffect(() => {\n    if (account?.address && currentWallet?.name) {\n      toTrackWalletConnect({\n        walletAddress: account?.address,\n        walletName: currentWallet?.name\n      })\n    }\n  }, [account?.address, currentWallet?.name])\n\n  const walletIcon = useMemo(() => {\n    if (currentWallet) {\n      const info = suiWalletList.find(wallet => currentWallet.name === wallet.walletName)\n      if (info) {\n        return info.icon.startsWith('http') ? info.icon : `/images/wallet/${info.icon}.png`\n      }\n      return currentWallet.icon\n    }\n    return undefined\n  }, [currentWallet])\n\n  return (\n    <HStack>\n      {!currentAccount && (\n        <Button\n          borderRadius=\"8px\"\n          fontSize=\"14px\"\n          // w=\"136px\"\n          p=\"0 16px\"\n          h=\"36px\"\n          fontWeight=\"500\"\n          onClick={() => {\n            onWalletModal(true)\n            onClose()\n          }}\n        >\n          Connect\n        </Button>\n      )}\n\n      {currentAccount && (\n        <Popover isLazy isOpen={isOpen} onClose={onClose}>\n          <PopoverTrigger>\n            <Button\n              variant=\"unstyled\"\n              display=\"flex\"\n              gap=\"8px\"\n              cursor=\"pointer\"\n              borderRadius=\"8px\"\n              border=\"1px solid\"\n              borderColor=\"border\"\n              p={{ base: '0 8px', lg: '0 16px' }}\n              bg=\"block_color_opacity.50\"\n              backdropFilter=\"blur(20px)\"\n              h=\"36px\"\n              sx={{\n                _hover: {\n                  bg: 'button_outline_hov_bg'\n                }\n              }}\n              onClick={onToggle}\n            >\n              <Image src={walletIcon} alt=\"SVG Image\" boxSize=\"20px\" objectFit=\"cover\" borderRadius=\"4px\" />\n              <Text fontSize=\"14px\" color=\"text_caption\" fontWeight=\"500\">\n                {accountServiceNameObj?.[currentAccount.address] || addressAbridge(currentAccount.address)}\n              </Text>\n            </Button>\n          </PopoverTrigger>\n          {(isOpenRecentTrans ? true : isOpen) && (\n            <PopoverContent w=\"360px\" bg=\"bg_secondary\" borderRadius=\"12px\" p=\"0px\">\n              <VStack alignItems=\"start\" p=\"16px\" w=\"100%\">\n                <Text fontSize=\"14px\" color=\"text_caption\">\n                  Connected with {currentWallet?.name}\n                </Text>\n                <VStack\n                  mt=\"8px\"\n                  w=\"100%\"\n                  p=\"20px\"\n                  borderRadius=\"12px\"\n                  alignItems=\"start\"\n                  sx={{\n                    backgroundImage: \"url('/images/bg@2x.png')\",\n                    backgroundPosition: 'top 0px',\n                    backgroundSize: '328px 116px',\n                    backgroundRepeat: 'no-repeat'\n                  }}\n                >\n                  <HStack gap=\"8px\">\n                    <Image src={walletIcon} alt=\"SVG Image\" boxSize=\"30px\" objectFit=\"cover\" borderRadius=\"8px\" />\n                    <Text fontSize=\"14px\" fontWeight=\"500\">\n                      {currentAccount?.label}\n                    </Text>\n                  </HStack>\n\n                  <HStack w=\"100%\" justifyContent=\"space-between\" alignItems=\"center\" mt=\"8px\">\n                    {/* 展示钱包地址 */}\n                    <AccountSwitch currentAccount={currentAccount} accounts={accounts} onClose={onClose} />\n                    {/* 拷贝和跳转 */}\n                    <HStack gap=\"4px\">\n                      <CopyButton svgW=\"24px\" svgH=\"24px\" text={currentAccount.address} />\n                      <Icon\n                        xlinkHref=\"#icon-icon_link1\"\n                        w=\"24px\"\n                        h=\"24px\"\n                        svgW=\"24px\"\n                        svgH=\"24px\"\n                        onClick={() => {\n                          window.open(getExplorerUrl(currentAccount.address), '_blank')\n                        }}\n                      />\n                    </HStack>\n                  </HStack>\n                </VStack>\n\n                {isCetusPump && (\n                  <Button\n                    variant=\"outline\"\n                    fontSize=\"14px\"\n                    w=\"100%\"\n                    mt=\"12px\"\n                    onClick={() => {\n                      onClose()\n                      navigate(`/profile`)\n                    }}\n                  >\n                    Profile\n                  </Button>\n                )}\n\n                <HStack w=\"100%\" mt=\"8px\">\n                  {/* 最近交易记录 */}\n                  <HStack\n                    cursor=\"pointer\"\n                    sx={{\n                      _hover: {\n                        p: {\n                          color: 'text_caption'\n                        },\n                        svg: {\n                          fill: 'text_caption'\n                        }\n                      }\n                    }}\n                    onClick={() => {\n                      setIsOpenRecentTrans(true)\n                    }}\n                  >\n                    <Icon xlinkHref=\"#icon-icon_recenttransactions\" svgW=\"20px\" svgH=\"20px\" />\n                    <Text>Recent Transactions</Text>\n                  </HStack>\n\n                  {/* 断开链接 */}\n                  <HStack\n                    pl=\"16px\"\n                    cursor=\"pointer\"\n                    sx={{\n                      _hover: {\n                        p: {\n                          color: 'text_caption'\n                        },\n                        svg: {\n                          fill: 'text_caption'\n                        }\n                      }\n                    }}\n                    onClick={() => {\n                      disconnect()\n                      if (phantomInstance) {\n                        phantomInstance.hide()\n                      }\n\n                      onClose()\n                    }}\n                  >\n                    <Icon xlinkHref=\"#icon-icon_disconnect\" svgW=\"20px\" svgH=\"20px\" svgHover=\"text_paragraph\" />\n                    <Text>Disconnect</Text>\n                  </HStack>\n                </HStack>\n              </VStack>\n            </PopoverContent>\n          )}\n        </Popover>\n      )}\n      {isOpenRecentTrans && <RecentTransactions isOpen={isOpenRecentTrans} onClose={() => setIsOpenRecentTrans(false)} />}\n    </HStack>\n  )\n}\n"],"names":["usePhantomAutoConnect","phantomInstance","useGlobalStore","connect","useConnectWallet","supportWalletList","useWallets","autoConnectPhantom","suiDappKitLocalData","_a","_b","walletObj","item","useEffect","ConnectButton","isCetusPump","isOpenRecentTrans","setIsOpenRecentTrans","useState","currentAccount","accounts","onWalletModal","saveAccounts","useAccountStore","currentWallet","connectionStatus","useCurrentWallet","account","useCurrentAccount","disconnect","useDisconnectWallet","getExplorerUrl","useExplorer","useWindowWidth","navigate","useNavigate","fetchAccountBalance","useAccountBalance","isOpen","onToggle","onClose","useDisclosure","currentNode","useRpcConfigStore","fetchServiceNames","useAccountServiceName","toTrackWalletConnect","useTrack","isInitialized","useSdkStore","saveCurrentAccount","accountServiceNameObj","setAccountServiceNameObj","walletIcon","useMemo","info","suiWalletList","wallet","HStack","jsx","Button","jsxs","Popover","PopoverTrigger","Image","Text","addressAbridge","PopoverContent","VStack","AccountSwitch","CopyButton","Icon","RecentTransactions"],"mappings":"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"}
>>>>>>> 0c24c70bb8f4b262d669a2d6c2f695cdc5861cf4:dist/assets/ConnectButton-B9OylJz4.js.map
