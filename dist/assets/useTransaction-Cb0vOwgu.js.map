{"version":3,"file":"useTransaction-Cb0vOwgu.js","sources":["../../../utils/src/error.ts","../../../hooks/src/useTransactionModal.ts","../../../../node_modules/.pnpm/shio-fast-sdk@0.0.6_typescript@5.8.3/node_modules/shio-fast-sdk/dist/esm/src/index.js","../../../hooks/src/resolveCoinBalance.ts","../../../hooks/src/useFastModeTransaction.ts","../../../hooks/src/useMsafeTransaction.ts","../../../../node_modules/.pnpm/shio-sdk@1.0.8/node_modules/shio-sdk/dist/index.js","../../src/hooks/common/useTransaction.tsx"],"sourcesContent":["/**\n * 用户拒绝\n * @param error\n * @returns\n */\nexport function isUserRejectedError(error: any) {\n  try {\n    return error && error.includes('user') && error.includes('reject')\n  } catch (error1) {\n    return false\n  }\n}\n\n/**\n * 创建池子存在错误\n * @param error\n * @returns\n */\nexport function isCreatePoolExistError(error: any) {\n  const errorString = String(error)\n  if (errorString.indexOf('Some(\"create_pool_internal\")') > -1 && errorString.indexOf(` }, 1`) > -1) {\n    return true\n  }\n  return false\n}\n\nexport function isPriceSlippageError(error: any) {\n  const errorString = String(error)\n  if (\n    errorString.indexOf('withdraw_with_proof') > -1 ||\n    errorString.indexOf('check_coin_threshold') > -1 ||\n    errorString.indexOf('Identifier(\"balance\")') > -1\n  ) {\n    return true\n  }\n\n  if (\n    errorString.indexOf('remove_liquidity') > -1 &&\n    (errorString.indexOf('in command 1') > -1 ||\n      errorString.indexOf('in command 2') > -1 ||\n      errorString.indexOf('in command 4') > -1 ||\n      errorString.indexOf('in command 5') > -1)\n  ) {\n    return true\n  }\n\n  if (\n    errorString.indexOf('repay_add_liquidity') > -1 &&\n    (errorString.indexOf('in command 1') > -1 ||\n      errorString.indexOf('in command 2') > -1 ||\n      errorString.indexOf('in command 3') > -1 ||\n      errorString.indexOf('in command 4') > -1 ||\n      errorString.indexOf('in command 5') > -1)\n  ) {\n    return true\n  }\n  return false\n}\n\nexport function isNotFindTxHashError(error: any) {\n  const errorString = String(error)\n  if (errorString.includes('Could not find the referenced transaction')) {\n    return true\n  }\n  return false\n}\n\nexport function isTRPCClientError(error: any) {\n  const errorString = String(error)\n  if (errorString.includes('TRPCClientError:')) {\n    return true\n  }\n  return false\n}\n\nexport function isSuiHTTPStatusError(error: any) {\n  const status = error.status\n  const errorString = String(error)\n\n  if ([429, 503, 502, 400].includes(status) || errorString.includes('Could not find the referenced object')) {\n    return true\n  }\n  return false\n}\n\nexport function isMaxCapError(error: any) {\n  const errorString = String(error)\n  if (errorString.includes('Max cap reached.')) {\n    return true\n  }\n  return false\n}\n\nexport function isFastModeServiceError(error: any) {\n  const errorString = String(error)\n  if (errorString.includes('Fast Mode service error')) {\n    return true\n  }\n  return false\n}\n\nexport function isNotSupportMsafe(error: any) {\n  const errorString = String(error)\n  if (errorString.includes('The current operation does not support msafe wallet')) {\n    return true\n  }\n  return false\n}\n\nexport function isVaultHardCapError(error: any) {\n  const errorString = String(error)\n  if (errorString.indexOf('hard_cap_reached') > -1) {\n    return true\n  }\n  return false\n}\n\ntype ErrorMatcher = (error: any) => boolean\ntype ErrorMessage = string | ((error: any) => string)\n\nconst errorMap: { matcher: ErrorMatcher; message: ErrorMessage }[] = [\n  { matcher: isUserRejectedError, message: 'User rejected the request' },\n  {\n    matcher: isNotFindTxHashError,\n    message: 'Oops. Failed to sync data from your txid. Please check your txn status from explorer or from your wallet.'\n  },\n  { matcher: isTRPCClientError, message: (error: any) => String(error).split(':')[1] },\n  {\n    matcher: isSuiHTTPStatusError,\n    message: 'RPC loading failed. Try resubmission or check your network. You can also switch an RPC in settings to try again.'\n  },\n  {\n    matcher: isMaxCapError,\n    message: 'Max cap reached. This is to prevent your txn from overpaying. You can choose to edit your gas max cap in settings if needed.'\n  },\n  { matcher: isFastModeServiceError, message: 'Fast Mode service error, please switch to the Default Transaction Mode or try again later.' },\n  { matcher: isNotSupportMsafe, message: 'The current operation does not support msafe wallet.' },\n  {\n    matcher: (error: any) => String(error).includes('Transaction validator signing failed'),\n    message: 'Oops. Failed to pull your txid. Please check your txn status from explorer or from your wallet.'\n  },\n  { matcher: isPriceSlippageError, message: 'Exceeded price slippage' },\n  { matcher: isCreatePoolExistError, message: 'Pool already exists' },\n  { matcher: isVaultHardCapError, message: 'Deposit Exceeds Cap' }\n]\n\nexport function handleErrorMessages(error: any): string {\n  for (const { matcher, message } of errorMap) {\n    if (matcher(error)) {\n      return typeof message === 'function' ? message(error) : message\n    }\n  }\n\n  return 'Transaction failed'\n}\n","import { useTransactionStore } from '@cetus/stores/src'\nimport { ToastType } from '@cetus/types/src/common-types'\nimport { useEffect, useRef } from 'react'\n\nexport default function useTransactionModal() {\n  const { setTransactionData, setTransactionModalVisible, manualCloseIdList } = useTransactionStore()\n\n  const manualCloseIdListRef = useRef(manualCloseIdList)\n\n  useEffect(() => {\n    manualCloseIdListRef.current = manualCloseIdList\n  }, [manualCloseIdList])\n\n  const isDisableModal = (id?: string) => {\n    if (id) {\n      const isDisable = manualCloseIdListRef.current.includes(id)\n      if (isDisable) {\n        setTransactionModalVisible(false)\n      }\n      return isDisable\n    }\n\n    return false\n  }\n\n  const transactionConfirmation = (props: ToastType) => {\n    if (isDisableModal(props.transactionId)) {\n      return\n    }\n    setTransactionData({\n      ...props,\n      status: 'confirmation'\n    })\n    setTransactionModalVisible(true)\n  }\n\n  const transactionSubmitted = (props: ToastType) => {\n    if (isDisableModal(props.transactionId)) {\n      return\n    }\n    setTransactionModalVisible(false)\n    setTransactionData({\n      ...props,\n      status: 'submitted'\n    })\n    setTransactionModalVisible(true)\n  }\n\n  const transactionSuccess = (props: ToastType) => {\n    if (isDisableModal(props.transactionId)) {\n      return\n    }\n    setTransactionModalVisible(false)\n    setTransactionData({\n      ...props,\n      status: 'success'\n    })\n    setTransactionModalVisible(true)\n  }\n\n  const transactionRejected = (props: ToastType, list = manualCloseIdList) => {\n    console.log('🚀 ~ file: useTransactionModal.ts:10 ~ useTransactionModal ~ id 55:', manualCloseIdList)\n    if (isDisableModal(props.transactionId)) {\n      return\n    }\n    setTransactionModalVisible(false)\n    setTransactionData({\n      ...props,\n      status: 'rejected'\n    })\n    setTransactionModalVisible(true)\n  }\n\n  const closeTransactionModal = () => {\n    setTransactionModalVisible(false)\n  }\n\n  return { transactionConfirmation, transactionSubmitted, transactionSuccess, transactionRejected, closeTransactionModal }\n}\n","import { bcs } from '@mysten/bcs';\nconst suiPackageId = \"0x2\";\nconst suiCoinType = \"0x2::sui::SUI\";\nexport const ShioFastRpcUrl = \"https://rpc.getshio.com/fast\";\nexport const ShioPackageId = \"0x1889977f0fb56ae730e7bda8e8e32859ce78874458c74910d36121a81a615123\";\nexport const ShioGlobalStateObjects = [\n    {\n        objectId: \"0xc32ce42eac951759666cbc993646b72387ec2708a2917c2c6fb7d21f00108c18\",\n        version: 72869622,\n    },\n    {\n        objectId: \"0x0289acae0edcdf1fe3aedc2e886bc23064d41c359e0179a18152a64d1c1c2b3e\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x03132160e8c2c45208abf3ccf165e82edcc42fee2e614afe54582f9740a808b8\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x072ae7307459e535379f422995a0d10132f12a3450298f8cf0cc07bd164f9999\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x1c1a96a2f4a34ea09ab15b8ff98f4b6b4338ce89f4158eb7d3eb2cd4dcbd6d86\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x20d76f37ad9f2421a9e6afaf3bb204250b1c2241c50e8a955e86a1a48767d06f\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x213ed368233cc7480fcb6336e70c5ae7ee106b2317ba02ccb5d0478e45bcc046\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x22ce1e80937354eba5549fed2937dc6e2b24026d03505bb51a3e4a64aa4142f6\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x26188cb7ce5ae633279f440f66081cb65cc585e428de18e194f8843e866f799f\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x38642f01422480128388d3e2948d3dc1b2680f9914077edb6bd3451ae1c5bcf0\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x3dd85b6424aea1cae9eff6e55456ca783e056226325f1362106eca8b3ed04ca0\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x42f8adc490542369d9c3b95e9f6eb70b2583102900feb7e103072ed49ba7fc3d\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x46b8158c82fa6bda7230d31a127d934c7295a0042083b4900f3096e9191f6f3f\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x6ebac88a8c3f7a4a9fb05ea49d188a1fe8520ae59ee736e0473004d3033512a4\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x6f55ad6cb40cfc124c11b11c19be0a80237b104acd955e7b52ccb7bf9046fe33\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x71aafb8bac986e82e5f78846bf3b36c2a82505585625207324140227a27ff279\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x7fe9b08680d4179de5672f213b863525b21f10604ca161538075e9338d1d2324\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x81538ef2909a3e0dd3d7f38bcbee191509bae4e8666272938ced295672e2ee8d\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x828eb6b3354ad68a23dd792313a16a0d888b7ea4fdb884bb22bd569f8e61319e\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x9705a332b8c1650dd7fe687ef9f9a9638afb51c30c0b34db150d60b920bc07eb\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x9918f73797a9390e9888b55454f2b31bc01de1a4634acab08f80641c4248e8a5\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0x9cd4c08bdf2e132ec2cc77b0f03be60a94951e046d8e82ed5494f44e609edd2f\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0xac8ce2033571140509788337c8a1f3aa8941a320ecd7047acda310d39cad9e03\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0xbcd4527035265461a9a7b4f1e57c63ea7a6bdf0dc223c66033c218d880f928b1\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0xbfdb691b8cc0b3c3a3b7a654f6682f3e53b164d9ee00b9582cdb4d0a353440a9\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0xc2559d5c52ae04837ddf943a8c2cd53a5a0b512cee615d30d3abe25aa339465e\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0xc56db634d02511e66d7ca1254312b71c60d64dc44bf67ea46b922c52d8aebba6\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0xc84545cbff1b36b874ab2b69d11a3d108f23562e87550588c0bda335b27101e0\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0xcc141659b5885043f9bfcfe470064819ab9ac667953bcedd1000e0652e90ee76\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0xef6bf4952968d25d3e79f7e4db1dc38f2e9d99d61ad38f3829acb4100fe6383a\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0xf2ed8d00ef829de5c4a3c5adf2d6b0f41f7fec005fb9c88e5616b98173b2fd66\",\n        version: 327637282,\n    },\n    {\n        objectId: \"0xfce73f3c32c3f56ddb924a04cabd44dd870b72954bbe7c3d7767c3b8c25c4326\",\n        version: 327637282,\n    }\n];\nexport async function EstimateFee(options) {\n    const client = options.client;\n    const txKindBytes = await options.transaction.build({\n        client: client,\n        onlyTransactionKind: true,\n    });\n    let sender = options.sender ?? options.transaction.getData().sender;\n    if (!sender) {\n        throw new Error(\"Sender need to be either set in options or in transaction data\");\n    }\n    const estimatedFee = await client.call(\"shio_estimateFastModeFee\", [\n        sender,\n        options.transaction.getData().gasData.price,\n        Buffer.from(txKindBytes).toString('base64')\n    ]);\n    return estimatedFee;\n}\nexport function PickShioGlobalStateObject() {\n    return ShioGlobalStateObjects[Math.floor(Math.random() * ShioGlobalStateObjects.length)];\n}\nexport async function FastGasFeePlugin(transactionData, options, next) {\n    if (!options.client) {\n        throw new Error(\"Client is not set\");\n    }\n    if (!transactionData.sender) {\n        throw new Error(\"Sender is not set\");\n    }\n    const client = options.client;\n    const txKindBytes = transactionData.build({\n        onlyTransactionKind: true,\n    });\n    const estimatedFee = await client.call(\"shio_estimateFastModeFee\", [\n        transactionData.sender,\n        Buffer.from(txKindBytes, 'binary').toString('base64')\n    ]);\n    console.log('shio_estimateFastModeFee', estimatedFee);\n    transactionData.gasData.price = estimatedFee.gasPrice;\n    transactionData.gasData.budget = estimatedFee.gasBudget;\n    // Pick a random global state object.\n    const randomGlobalStateObject = PickShioGlobalStateObject();\n    const shioTipAmountInputIdx = transactionData.inputs.length;\n    transactionData.inputs.push({\n        $kind: \"Pure\",\n        Pure: {\n            // Use 8 bytes little endian to represent the tip amount.\n            bytes: bcs.u64().serialize(estimatedFee.tipAmount).toBytes(),\n        }\n    });\n    const shioObjInputIdx = transactionData.inputs.length;\n    transactionData.inputs.push({\n        $kind: \"Object\",\n        Object: {\n            $kind: \"SharedObject\",\n            SharedObject: {\n                objectId: randomGlobalStateObject.objectId,\n                initialSharedVersion: randomGlobalStateObject.version,\n                mutable: true,\n            }\n        }\n    });\n    // Add tip commands.\n    let splitCoinsCommandIdx = transactionData.commands.length;\n    transactionData.commands.push({\n        $kind: \"SplitCoins\",\n        SplitCoins: {\n            coin: {\n                $kind: \"GasCoin\",\n                GasCoin: true,\n            },\n            amounts: [{\n                    $kind: \"Input\",\n                    Input: shioTipAmountInputIdx,\n                }],\n        }\n    });\n    let intoBalanceCommandIdx = transactionData.commands.length;\n    transactionData.commands.push({\n        $kind: \"MoveCall\",\n        MoveCall: {\n            package: suiPackageId,\n            module: \"coin\",\n            function: \"into_balance\",\n            typeArguments: [suiCoinType],\n            arguments: [\n                {\n                    $kind: \"NestedResult\",\n                    NestedResult: [splitCoinsCommandIdx, 0],\n                }\n            ]\n        }\n    });\n    transactionData.commands.push({\n        $kind: \"MoveCall\",\n        MoveCall: {\n            package: ShioPackageId,\n            module: \"auctioneer\",\n            function: \"submit_bid\",\n            typeArguments: [],\n            arguments: [\n                {\n                    $kind: \"Input\",\n                    Input: shioObjInputIdx,\n                },\n                {\n                    $kind: \"Input\",\n                    Input: shioTipAmountInputIdx,\n                },\n                {\n                    $kind: \"Result\",\n                    Result: intoBalanceCommandIdx,\n                },\n            ]\n        }\n    });\n    console.log(transactionData);\n    await next();\n}\n// Make sure FastGasFeePlugin is TransactionPlugin.\nconst _p = FastGasFeePlugin;\nexport async function ExecuteTransactionBlock(client, txAndSig, options) {\n    return await client.executeTransactionBlock({\n        transactionBlock: txAndSig.bytes,\n        signature: txAndSig.signature,\n        options,\n    });\n}\nexport async function ExecuteBundle(client, txAndSig) {\n    var args = [];\n    for (const elem of txAndSig) {\n        args.push({\n            txData: elem.bytes,\n            signatures: [elem.signature],\n        });\n    }\n    await client.call(\"shio_executeBundle\", args);\n    return true;\n}\nexport async function AppendCoinToTip(tx, coin, tipAmount) {\n    let tipBalance = tx.moveCall({\n        package: \"0x2\",\n        module: \"coin\",\n        function: \"into_balance\",\n        typeArguments: [suiCoinType],\n        arguments: [coin],\n    });\n    return AppendBalanceToTip(tx, tipBalance, tipAmount);\n}\nexport async function AppendBalanceToTip(tx, balance, tipAmount) {\n    let globalStateObject = PickShioGlobalStateObject();\n    tx.moveCall({\n        package: ShioPackageId,\n        module: \"auctioneer\",\n        function: \"submit_bid\",\n        arguments: [\n            tx.sharedObjectRef({\n                objectId: globalStateObject.objectId,\n                mutable: true,\n                initialSharedVersion: globalStateObject.version,\n            }),\n            tx.pure.u64(tipAmount),\n            balance,\n        ],\n    });\n}\n","import { bcs } from '@mysten/sui/bcs'\nimport { CoinStruct, SuiClient } from '@mysten/sui/client'\nimport { Argument, BuildTransactionOptions, Commands, Inputs, TransactionDataBuilder } from '@mysten/sui/transactions'\nimport { bigint, object, parse, string } from 'valibot'\n\nexport const COIN_WITH_BALANCE = 'CoinWithBalance'\n\nconst CoinWithBalanceData = object({\n  type: string(),\n  balance: bigint()\n})\n\nexport async function resolveCoinBalance(transactionData: TransactionDataBuilder, buildOptions: BuildTransactionOptions, next: () => Promise<void>) {\n  const coinTypes = new Set<string>()\n  const totalByType = new Map<string, bigint>()\n\n  if (!transactionData.sender) {\n    throw new Error('Sender must be set to resolve CoinWithBalance')\n  }\n\n  for (const command of transactionData.commands) {\n    if (command.$kind === '$Intent' && command.$Intent.name === COIN_WITH_BALANCE) {\n      const { type, balance } = parse(CoinWithBalanceData, command.$Intent.data)\n\n      if (type !== 'gas' && balance > 0n) {\n        coinTypes.add(type)\n      }\n\n      totalByType.set(type, (totalByType.get(type) ?? 0n) + balance)\n    }\n  }\n  const usedIds = new Set<string>()\n\n  for (const input of transactionData.inputs) {\n    if (input.Object?.ImmOrOwnedObject) {\n      usedIds.add(input.Object.ImmOrOwnedObject.objectId)\n    }\n    if (input.UnresolvedObject?.objectId) {\n      usedIds.add(input.UnresolvedObject.objectId)\n    }\n  }\n\n  const coinsByType = new Map<string, CoinStruct[]>()\n  const client = buildOptions.client!\n  await Promise.all(\n    [...coinTypes].map(async coinType => {\n      coinsByType.set(\n        coinType,\n        await getCoinsOfType({\n          coinType,\n          balance: totalByType.get(coinType)!,\n          client,\n          owner: transactionData.sender!,\n          usedIds\n        })\n      )\n    })\n  )\n\n  const mergedCoins = new Map<string, Argument>()\n\n  mergedCoins.set('gas', { $kind: 'GasCoin', GasCoin: true })\n\n  for (const [index, transaction] of transactionData.commands.entries()) {\n    if (transaction.$kind !== '$Intent' || transaction.$Intent.name !== COIN_WITH_BALANCE) {\n      continue\n    }\n\n    const { type, balance } = transaction.$Intent.data as {\n      type: string\n      balance: bigint\n    }\n\n    if (balance === 0n && type !== 'gas') {\n      transactionData.replaceCommand(index, Commands.MoveCall({ target: '0x2::coin::zero', typeArguments: [type] }))\n      continue\n    }\n\n    const commands = []\n\n    if (!mergedCoins.has(type)) {\n      const [first, ...rest] = coinsByType.get(type)!.map(coin =>\n        transactionData.addInput(\n          'object',\n          Inputs.ObjectRef({\n            objectId: coin.coinObjectId,\n            digest: coin.digest,\n            version: coin.version\n          })\n        )\n      )\n\n      if (rest.length > 0) {\n        commands.push(Commands.MergeCoins(first, rest))\n      }\n\n      mergedCoins.set(type, first)\n    }\n\n    commands.push(Commands.SplitCoins(mergedCoins.get(type)!, [transactionData.addInput('pure', Inputs.Pure(bcs.u64().serialize(balance)))]))\n\n    transactionData.replaceCommand(index, commands)\n\n    transactionData.mapArguments(arg => {\n      if (arg.$kind === 'Result' && arg.Result === index) {\n        return {\n          $kind: 'NestedResult',\n          NestedResult: [index + commands.length - 1, 0]\n        }\n      }\n\n      return arg\n    })\n  }\n\n  return next()\n}\n\nasync function getCoinsOfType({\n  coinType,\n  balance,\n  client,\n  owner,\n  usedIds\n}: {\n  coinType: string\n  balance: bigint\n  client: SuiClient\n  owner: string\n  usedIds: Set<string>\n}): Promise<CoinStruct[]> {\n  let remainingBalance = balance\n  const coins: CoinStruct[] = []\n\n  return loadMoreCoins()\n\n  async function loadMoreCoins(cursor: string | null = null): Promise<CoinStruct[]> {\n    const { data, hasNextPage, nextCursor } = await client.getCoins({ owner, coinType, cursor })\n\n    const sortedCoins = data.sort((a, b) => Number(BigInt(b.balance) - BigInt(a.balance)))\n\n    for (const coin of sortedCoins) {\n      if (usedIds.has(coin.coinObjectId)) {\n        continue\n      }\n\n      const coinBalance = BigInt(coin.balance)\n\n      coins.push(coin)\n      remainingBalance -= coinBalance\n\n      if (remainingBalance <= 0) {\n        return coins\n      }\n    }\n\n    if (hasNextPage) {\n      return loadMoreCoins(nextCursor)\n    }\n\n    throw new Error(`Not enough coins of type ${coinType} to satisfy requested balance`)\n  }\n}\n","import { useAccountStore } from '@cetus/stores'\nimport { d } from '@cetus/utils'\nimport { SuiClient } from '@mysten/sui/client'\nimport { Transaction } from '@mysten/sui/transactions'\nimport { AppendCoinToTip, EstimateFee, ExecuteTransactionBlock, ShioFastRpcUrl } from 'shio-fast-sdk'\nimport { COIN_WITH_BALANCE, resolveCoinBalance } from './resolveCoinBalance'\nimport { useSigner } from './useSigner'\n\nexport default function useFastModeTransaction() {\n  const { signTransactionBlock, executeTransactionBlock, signAndExecuteTransactionBlock } = useSigner()\n  const { currentAccount } = useAccountStore()\n\n  const getFastModeTx = async (tx: any, maxCapForGas: string, customGasPrice: string) => {\n    console.log('🚀🚀🚀 ~ useFastModeTransaction.ts:12 ~ getFastModeTx ~ getFastModeTx:', getFastModeTx)\n    let result\n    let startExecuteTime\n    let transactionBlockBytes\n    try {\n      const client = new SuiClient({ url: ShioFastRpcUrl })\n\n      tx.setSender(currentAccount?.address)\n      tx.setGasPrice(Number(customGasPrice))\n\n      const ntx = Transaction.from(tx)\n      ntx.addIntentResolver(COIN_WITH_BALANCE, resolveCoinBalance)\n\n      const estimatedFee = await EstimateFee({\n        transaction: ntx,\n        client\n      })\n\n      const maxCapForGasAmount = d(maxCapForGas).mul(Math.pow(10, 9)).toString()\n      if (d(estimatedFee.gasBudget).gt(maxCapForGasAmount)) {\n        throw Error('Max cap reached. This is to prevent your txn from overpaying. You can choose to edit your gas max cap in settings if needed.')\n      }\n\n      tx.setGasBudget(estimatedFee.gasBudget)\n\n      console.log(estimatedFee)\n\n      const tipCoins = tx.splitCoins(tx.gas, [estimatedFee.tipAmount])\n      AppendCoinToTip(tx, tipCoins[0], estimatedFee.tipAmount)\n\n      const builtTx = await tx.build({\n        client\n      })\n\n      // const signTx = await signTransactionBlock(tx)\n      const signTx = await signTransactionBlock(builtTx)\n\n      console.log('🚀 ~ file: useTransaction.tsx:94 ~ useTransaction ~ signTx:', signTx)\n\n      const { bytes, signature } = signTx\n\n      transactionBlockBytes = bytes\n\n      console.log('🚀 ~ getFastModeTx ~ signTx:', signTx)\n\n      startExecuteTime = new Date().getTime()\n      // Execute the transaction with Fast Mode.\n      // const result = await ExecuteTransactionBlock(client, signature, {\n      result = await ExecuteTransactionBlock(client, signTx, {\n        showEffects: true,\n        showEvents: true\n      })\n      console.log('🚀 ~ getFastModeTx ~ result:', result)\n      // return result\n    } catch (error) {\n      console.log('🚀 ~ getFastModeTx ~ error:', error)\n      console.log('🚀 ~ getFastModeTx ~ String(error).includes(Failed to fetch):', String(error).includes('Failed to fetch'))\n      if (String(error).includes('Failed to fetch')) {\n        throw Error('Fast Mode service error')\n      }\n      throw error\n    }\n\n    // try {\n    //   await ExecuteBundle(client, [signTx])\n    // } catch (error) {\n    //   console.log('🚀 ~ getFastModeTx ~ error:', error)\n    // }\n\n    return {\n      result,\n      startExecuteTime,\n      transactionBlockBytes\n    }\n  }\n\n  return {\n    getFastModeTx\n  }\n}\n","import { useCurrentAccount, useCurrentWallet } from '@mysten/dapp-kit'\nimport { useMemo } from 'react'\n\nexport default function useMsafeTransaction() {\n  const wallet = useCurrentWallet()\n  const account = useCurrentAccount()\n\n  const signAndExecuteTransactionBlock = useMemo(() => {\n    if (!wallet.currentWallet) {\n      return null\n    }\n    const feature = wallet.currentWallet.features['sui:signAndExecuteTransactionBlock']\n    if (!feature) {\n      return null\n    }\n    return feature.signAndExecuteTransactionBlock\n  }, [wallet])\n\n  const getMsafeRes = async (txb: any, msafeParams: any) => {\n    if (!account || !signAndExecuteTransactionBlock) {\n      throw new Error('No account information')\n    }\n\n    txb.setSender(account?.address)\n    const res = await signAndExecuteTransactionBlock({\n      transactionBlock: txb,\n      account,\n      chain: account?.chains[0],\n      action: msafeParams?.action,\n      txbParams: msafeParams?.txbParams\n    })\n\n    return res\n  }\n\n  return {\n    getMsafeRes\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.executeAuction = executeAuction;\nvar axios_1 = require(\"axios\");\nvar RPC_URL = 'https://rpc.getshio.com';\nvar DEFAULT_MAX_DELAY = 500; // 500ms\nvar AUCTION_DELAY = 300; // 300ms\n/**\n * Notify Shio to execute an auction with the given transaction bytes.\n *\n * Should an auction be conducted successfully, A Soft Bundle (SIP-19) containing the user\n * transaction along with successful bids will be submitted on behalf of the user.\n * All this happens behind the scenes, and by the time executeTransactionBlock call is made to the dApp’s\n * Wallet SDK, the user transaction would have already been sequenced and executed, in which case,\n * the previous execution result will be returned immediately, making the whole process transparent.\n *\n * @param encodedTxData Base64-encoded string of the transaction bytes (represents TransactionData).\n * @param encodedSig Base64-encoded string of the signature bytes (represents Signature).\n * @returns A promise that resolves when a sufficient delay has passed, or an error occurs.\n *          The caller must await this promise to ensure the auction has completed.\n */\nfunction executeAuction(encodedTxData, encodedSig, maxDelayMs) {\n    if (maxDelayMs === void 0) { maxDelayMs = DEFAULT_MAX_DELAY; }\n    var payload = {\n        jsonrpc: '2.0',\n        method: 'shio_executeAuction',\n        params: [encodedTxData, encodedSig],\n        id: 1\n    };\n    return new Promise(function (resolve, reject) {\n        // Unconditionally resolve after a delay, regardless of the response.\n        setTimeout(resolve, maxDelayMs);\n        axios_1.default\n            .post(RPC_URL, payload, {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            timeout: maxDelayMs,\n        })\n            .then(function (resp) {\n            // The response is not important, we just need to wait for the auction to complete.\n            console.log('Shio executeAuction response:', resp.data);\n            setTimeout(resolve, AUCTION_DELAY);\n        })\n            .catch(reject);\n    });\n}\nexports.default = { executeAuction: executeAuction };\n","import { useGlobalToast } from '@cetus/design'\nimport useExplorer from '@cetus/hooks/src/useExplorer'\nimport useFastModeTransaction from '@cetus/hooks/src/useFastModeTransaction'\nimport useMsafeTransaction from '@cetus/hooks/src/useMsafeTransaction'\nimport { useSigner } from '@cetus/hooks/src/useSigner'\nimport useTrack from '@cetus/hooks/src/useTrack'\nimport useTransactionModal from '@cetus/hooks/src/useTransactionModal'\nimport { useSdk } from '@cetus/sdk-factory'\nimport { useAccountStore } from '@cetus/stores'\nimport { CommonTypeInfo, ToastType, TransactionOption } from '@cetus/types/src/common-types'\nimport { trackShioEvent } from '@cetus/utils'\nimport { base64ToUint8Array, parseOwnerBalanceChanges, sleepTime } from '@cetus/utils/src/common'\nimport { handleErrorMessages } from '@cetus/utils/src/error'\nimport { MSafeWallet } from '@msafe/sui-wallet'\nimport { Transaction, TransactionDataBuilder } from '@mysten/sui/transactions'\nimport { executeAuction } from 'shio-sdk'\n\nexport default function useTransaction() {\n  const { signTransactionBlock, executeTransactionBlock, signAndExecuteTransactionBlock } = useSigner()\n  const { currentAccount } = useAccountStore()\n  const clmmSdk = useSdk('clmm')\n  const { transactionConfirmation, transactionSubmitted, transactionSuccess, transactionRejected, closeTransactionModal } = useTransactionModal()\n  const { submittedTsToast, failedTsToast, successTsToast, closeToast } = useGlobalToast()\n  const { getExplorerUrl } = useExplorer()\n  const { getFastModeTx } = useFastModeTransaction()\n  const { getMsafeRes } = useMsafeTransaction()\n  const { trackShio, trackSwap } = useTrack()\n\n  const MAX_RETRIES = 5\n  const RETRY_DELAY = 2000\n\n  async function getTransactionStatus(digest: string, attempt = 1): Promise<any> {\n    console.log('🚀 ~ file: useTransaction.tsx:24 ~ getTransactionStatus ~ Checking transaction status, attempt:', attempt)\n\n    try {\n      let response\n      try {\n        response = await clmmSdk!.FullClient.getTransactionBlock({\n          digest,\n          options: {\n            showEvents: true,\n            showEffects: true,\n            showBalanceChanges: true,\n            showInput: true,\n            showRawInput: true,\n            showObjectChanges: true\n          }\n        })\n      } catch (error) {\n        response = await clmmSdk!.FullClient.getTransactionBlock({\n          digest,\n          options: {\n            showEvents: true,\n            showEffects: true\n          }\n        })\n      }\n\n      console.log('🚀 ~ file: useTransaction.tsx:28 ~ getTransactionStatus ~ response:', response)\n\n      if (response) {\n        return response\n      }\n      throw new Error('Empty response')\n    } catch (error) {\n      console.error(`Attempt ${attempt} failed:`, error)\n\n      if (attempt >= MAX_RETRIES) {\n        throw new Error('Failed to fetch transaction status after maximum retries.')\n      }\n\n      // 延迟后继续下一次轮询\n      await sleepTime(RETRY_DELAY)\n      return getTransactionStatus(digest, attempt + 1)\n    }\n  }\n\n  type BuildTransactionCallback = () => Promise<Transaction>\n\n  const signAndExecuteTransaction = async (\n    tx: Transaction | BuildTransactionCallback,\n    toastType: ToastType,\n    {\n      useDevInspect = false,\n      useMev = false,\n      txAction = 'signTransactionBlock',\n      showSuccessModal = true,\n      useFastMode = false,\n      maxCapForGas = '',\n      customGasPrice = '',\n      msafeParams,\n      otherParams\n    }: TransactionOption = {}\n  ) => {\n    console.log('🚀 ~ useTransaction ~ msafeParams:', msafeParams)\n    console.log('🚀 ~ useTransaction ~ otherParams:', otherParams)\n    console.log('🚀 ~ file: useTransaction.tsx:76 ~ useTransaction ~ option:', {\n      useDevInspect,\n      useMev,\n      txAction,\n      tx,\n      toastType,\n      useFastMode,\n      maxCapForGas,\n      customGasPrice,\n      msafeParams\n    })\n\n    // if (useFastMode && maxCapForGas) {\n    //   await getFastModeTx(tx, maxCapForGas)\n    // }\n\n    const txConfirmToastId = toastType.transactionId ? toastType.transactionId : new Date().getTime().toString()\n    toastType.transactionId = txConfirmToastId\n    // 确认中\n    transactionConfirmation(toastType)\n\n    const isSwap = msafeParams?.action === 'AggregatorSwap'\n    let digest = ''\n\n    try {\n      let response\n      let transactionBlockBytes\n\n      let transaction: Transaction\n      if (typeof tx === 'function') {\n        transaction = await tx()\n      } else {\n        transaction = tx\n      }\n      transaction.setSender(currentAccount?.address)\n      let startExecuteTime\n      if (useFastMode && maxCapForGas && customGasPrice) {\n        // Fast mode模式\n        console.log('🚀🚀🚀 ~ useTransaction.tsx:135 ~ useTransaction ~ res:')\n        const res = await getFastModeTx(transaction, maxCapForGas, customGasPrice)\n        response = res.result\n        startExecuteTime = res.startExecuteTime\n        transactionBlockBytes = res.transactionBlockBytes\n      } else if (MSafeWallet?.inMSafeWallet()) {\n        if (msafeParams) {\n          response = await getMsafeRes(transaction, msafeParams)\n        } else {\n          throw Error('The current operation does not support msafe wallet')\n        }\n      } else {\n        // Default模式\n        if (txAction === 'signTransactionBlock') {\n          const signTx = await signTransactionBlock(transaction)\n          startExecuteTime = new Date().getTime()\n          console.log('🚀 ~ file: useTransaction.tsx:94 ~ useTransaction ~ signTx:', signTx)\n\n          const { bytes, signature } = signTx\n          transactionBlockBytes = signTx.bytes\n          if (useMev) {\n            try {\n              const shioRes = await executeAuction(bytes, signature, 500)\n              console.log('🚀 ~ file: useTransaction.tsx:92 ~ useTransaction ~ shioRes: success', shioRes)\n            } catch (error) {\n              console.log('🚀 ~ file: useTransaction.tsx:95 ~ useTransaction ~ shioRes : error:', error)\n            }\n          }\n          console.log('🚀 ~ useTransaction ~ useMev:', useMev)\n          response = await executeTransactionBlock(bytes, signature, useDevInspect)\n          console.log('🚀 ~ useTransaction ~ response:', response)\n        } else {\n          response = await signAndExecuteTransactionBlock(transaction, useDevInspect)\n        }\n      }\n\n      digest = response?.digest\n      console.log('🚀 ~ file: useTransaction.tsx:24 ~ signAndExecuteTransaction ~ response:', response)\n\n      if (!digest && transactionBlockBytes) {\n        const uint8ArrayData = base64ToUint8Array(transactionBlockBytes)\n        digest = TransactionDataBuilder.getDigestFromBytes(uint8ArrayData)\n      }\n\n      toastType.tx = digest\n      transactionSubmitted(toastType)\n      if (!toastType.isSwapWidget) {\n        submittedTsToast(toastType)\n      }\n      // 关闭进度弹窗\n      closeToast(txConfirmToastId)\n\n      let res\n      if (response?.effects?.status.status === 'success') {\n        res = response\n      } else {\n        console.log('🚀🚀🚀 ~ useTransaction.tsx:191 ~ useTransaction ~ digest:', digest)\n        res = await getTransactionStatus(digest, 0)\n      }\n\n      if (!res || res.effects?.status.status === 'failure') {\n        const errorString = handleError(toastType, res.effects?.status.error)\n\n        // 谷歌打点\n        if (isSwap) {\n          trackSwap(\n            {\n              ...otherParams,\n              useMev,\n              useFastMode\n            },\n            errorString,\n            digest\n          )\n        }\n      } else {\n        // 成功\n        if (startExecuteTime) {\n          const endExecuteTime = new Date().getTime()\n          const timestampMs: number = res?.timestampMs || 0\n          const endTime = timestampMs && Number(timestampMs) > startExecuteTime ? Math.min(endExecuteTime, Number(timestampMs)) : endExecuteTime\n          const executeTime = endTime - startExecuteTime\n          console.log('🚀 ~ useTransaction ~ executeTime:', executeTime)\n\n          if (executeTime < 1000) {\n            toastType.executeTime = executeTime\n          }\n        }\n\n        const balanceChanges = parseOwnerBalanceChanges(res, currentAccount?.address, false)\n        console.log('🚀🚀🚀 ~ useTransaction.tsx:165 ~ useTransaction ~ res:', res)\n\n        console.log('🚀 ~ file: useTransaction.tsx:48 ~ signAndExecuteTransaction ~ balanceChanges:', balanceChanges)\n        if (toastType.getShowInfo) {\n          const info = toastType.getShowInfo('success', balanceChanges, res)\n          toastType.getShowInfo = (_: any) => {\n            return info\n          }\n        }\n        if (showSuccessModal) {\n          transactionSuccess(toastType)\n        } else {\n          closeTransactionModal()\n        }\n        if (!toastType.isSwapWidget) {\n          toastType.transactionId = undefined\n          successTsToast(toastType)\n        }\n        if (res && !res.digest && digest) {\n          res.digest = digest\n        }\n\n        // 配合shio打点\n        if (msafeParams) {\n          try {\n            trackShioEvent(msafeParams.action, useFastMode || useMev, digest)\n          } catch (e) {\n            console.log('🚀 ~ useTransaction ~ trackShioEvent error:', e)\n          }\n        }\n\n        // 谷歌打点\n        if (isSwap) {\n          trackSwap({ ...otherParams, useMev, useFastMode }, '', digest)\n        }\n        return res\n      }\n    } catch (error) {\n      console.log('🚀🚀🚀 ~ useTransaction.tsx:253 ~ useTransaction ~ error:', error)\n      // ToDo: 应该所有操作当rpc有问题时都需报错，后面需统一处理\n      if (txConfirmToastId) {\n        closeToast(txConfirmToastId)\n      }\n\n      const errorString = handleError(toastType, error)\n\n      // 谷歌打点\n      if (isSwap) {\n        trackSwap({ ...otherParams, useMev, useFastMode }, errorString, digest)\n      }\n    }\n\n    return undefined\n  }\n\n  const handleError = (toastType: ToastType, error: any) => {\n    const errorString = handleErrorMessages(error)\n\n    console.error('🚀 ~ file: useTransaction.tsx:270 ~ handleError ~ error:', { error, errorString })\n\n    if (toastType.getShowInfo) {\n      const info = toastType.getShowInfo('rejected')\n\n      toastType.getShowInfo = (_: any) => {\n        info.toastDescriptionContent = errorString\n        info.modalDescriptionText = errorString\n        return info\n      }\n      transactionRejected(toastType)\n      if (!toastType.isSwapWidget) {\n        failedTsToast(toastType)\n      }\n    } else {\n      toastType.getShowInfo = (_: any) => {\n        const info: CommonTypeInfo = {}\n        info.toastDescriptionContent = errorString\n        info.modalDescriptionText = errorString\n        return info\n      }\n      transactionRejected(toastType)\n      if (!toastType.isSwapWidget) {\n        failedTsToast(toastType)\n      }\n    }\n\n    return errorString\n  }\n\n  return {\n    signAndExecuteTransaction,\n    transactionSuccess,\n    getTransactionStatus,\n    transactionConfirmation,\n    transactionRejected,\n    handleError\n  }\n}\n"],"names":["isUserRejectedError","error","isCreatePoolExistError","errorString","isPriceSlippageError","isNotFindTxHashError","isTRPCClientError","isSuiHTTPStatusError","status","isMaxCapError","isFastModeServiceError","isNotSupportMsafe","isVaultHardCapError","errorMap","handleErrorMessages","matcher","message","useTransactionModal","setTransactionData","setTransactionModalVisible","manualCloseIdList","useTransactionStore","manualCloseIdListRef","useRef","useEffect","isDisableModal","id","isDisable","props","list","suiCoinType","ShioFastRpcUrl","ShioPackageId","ShioGlobalStateObjects","EstimateFee","options","client","txKindBytes","sender","Buffer","PickShioGlobalStateObject","ExecuteTransactionBlock","txAndSig","AppendCoinToTip","tx","coin","tipAmount","tipBalance","AppendBalanceToTip","balance","globalStateObject","COIN_WITH_BALANCE","CoinWithBalanceData","object","string","bigint","resolveCoinBalance","transactionData","buildOptions","next","coinTypes","totalByType","command","type","parse","usedIds","input","_a","_b","coinsByType","coinType","getCoinsOfType","mergedCoins","index","transaction","Commands","commands","first","rest","Inputs","bcs","arg","owner","remainingBalance","coins","loadMoreCoins","cursor","data","hasNextPage","nextCursor","sortedCoins","a","b","coinBalance","useFastModeTransaction","signTransactionBlock","useSigner","currentAccount","useAccountStore","getFastModeTx","maxCapForGas","customGasPrice","result","startExecuteTime","transactionBlockBytes","SuiClient","ntx","Transaction","estimatedFee","maxCapForGasAmount","d","tipCoins","builtTx","signTx","bytes","signature","useMsafeTransaction","wallet","useCurrentWallet","account","useCurrentAccount","signAndExecuteTransactionBlock","useMemo","feature","txb","msafeParams","dist","executeAuction_1","executeAuction","axios_1","require$$0","RPC_URL","DEFAULT_MAX_DELAY","AUCTION_DELAY","encodedTxData","encodedSig","maxDelayMs","payload","resolve","reject","resp","useTransaction","executeTransactionBlock","clmmSdk","useSdk","transactionConfirmation","transactionSubmitted","transactionSuccess","transactionRejected","closeTransactionModal","submittedTsToast","failedTsToast","successTsToast","closeToast","useGlobalToast","useExplorer","getMsafeRes","trackSwap","useTrack","MAX_RETRIES","RETRY_DELAY","getTransactionStatus","digest","attempt","response","sleepTime","signAndExecuteTransaction","toastType","useDevInspect","useMev","txAction","showSuccessModal","useFastMode","otherParams","txConfirmToastId","isSwap","res","MSafeWallet","shioRes","uint8ArrayData","base64ToUint8Array","TransactionDataBuilder","_c","handleError","_d","endExecuteTime","timestampMs","executeTime","balanceChanges","parseOwnerBalanceChanges","info","_","trackShioEvent","e"],"mappings":"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","x_google_ignoreList":[2,6]}