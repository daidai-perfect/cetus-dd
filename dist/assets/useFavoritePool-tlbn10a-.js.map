{"version":3,"file":"useFavoritePool-tlbn10a-.js","sources":["../../src/store/pool/index.ts","../../src/hooks/pool/useFavoritePool.ts"],"sourcesContent":["import { Token } from '@cetus/types'\nimport { IS_ALL_POOLS, IS_INCENTIVIZED_ONLY, IS_WATCH_LIST, POOL_FAVORITE_LIST, POOL_SELECT_COIN_LIST, VariousTokensTable } from '@cetus/utils'\nimport { create, StateCreator } from 'zustand'\n\ninterface poolsState {\n  poolListLength: string\n  setPoolListLength: (data: string) => void\n  poolRefreshStatus: string\n  setPoolRefreshStatus: (data: string) => void\n  isWatchList: boolean | undefined\n  setIsWatchList: (isWatchList: boolean) => void\n  isAllPools: boolean\n  setIsAllPools: (isAllPools: boolean) => void\n  isIncentivizedOnly: boolean\n  setIsIncentivizedOnly: (isIncentivizedOnly: boolean) => void\n  poolFavoriteIds: string[]\n  setPoolFavoriteId: (id: string) => void\n  setPoolFavoriteIds: (ids: string[]) => void\n  poolFavoriteIdsChange: boolean\n  setPoolFavoriteIdsChange: (data: boolean) => void\n  selectCoinList: Token[]\n  setSelectCoinList: (list: Token[]) => void\n}\n\nconst store: StateCreator<poolsState> = (set, get) => ({\n  poolListLength: '',\n  setPoolListLength: (data: string) => {\n    set(() => ({\n      poolListLength: data\n    }))\n  },\n  poolRefreshStatus: 'pending', // 'pending'|'success'|'error'|'timeout' ËØ∑Ê±ÇÊ±†Â≠êÂàóË°®Êó∂ÁöÑÁä∂ÊÄÅ\n  setPoolRefreshStatus: (data: string) => {\n    set(() => ({\n      poolRefreshStatus: data\n    }))\n  },\n  isWatchList: undefined,\n  setIsWatchList: (isWatchList: boolean) => {\n    set(() => ({\n      isWatchList\n    }))\n    VariousTokensTable.setItem(IS_WATCH_LIST, isWatchList)\n  },\n  isAllPools: false,\n  setIsAllPools: (isAllPools: boolean) => {\n    set(() => ({\n      isAllPools\n    }))\n    VariousTokensTable.setItem(IS_ALL_POOLS, isAllPools)\n  },\n  isIncentivizedOnly: false,\n  setIsIncentivizedOnly: (isIncentivizedOnly: boolean) => {\n    set(() => ({\n      isIncentivizedOnly\n    }))\n    VariousTokensTable.setItem(IS_INCENTIVIZED_ONLY, isIncentivizedOnly)\n  },\n  poolFavoriteIds: [],\n  setPoolFavoriteId: (id: string) => {\n    const newPoolFavoriteIds = [...get().poolFavoriteIds, id]\n    set(() => ({\n      poolFavoriteIds: newPoolFavoriteIds\n    }))\n    VariousTokensTable.setItem(POOL_FAVORITE_LIST, newPoolFavoriteIds)\n  },\n  setPoolFavoriteIds: (ids: string[]) => {\n    set(() => ({\n      poolFavoriteIds: ids\n    }))\n    VariousTokensTable.setItem(POOL_FAVORITE_LIST, ids)\n  },\n  poolFavoriteIdsChange: false,\n  setPoolFavoriteIdsChange: (data: boolean) => {\n    set(() => ({\n      poolFavoriteIdsChange: data\n    }))\n  },\n  selectCoinList: [],\n  setSelectCoinList: (selectCoinList: Token[]) => {\n    set(() => ({\n      selectCoinList\n    }))\n    VariousTokensTable.setItem(POOL_SELECT_COIN_LIST, selectCoinList)\n  }\n})\n\nconst usePoolsStore = create(store)\nexport default usePoolsStore\n\n// ‰ªé localForage Âä†ËΩΩÊï∞ÊçÆ\nVariousTokensTable.getItem<any>(POOL_FAVORITE_LIST).then(savedPoolFavoriteList => {\n  console.log('üöÄ ~ file: store/pool/index.ts.ts ~ savedPoolFavoriteList:', savedPoolFavoriteList)\n  if (savedPoolFavoriteList?.length > 0) {\n    usePoolsStore.getState().setPoolFavoriteIds(savedPoolFavoriteList)\n  }\n})\n// ‰ªé localForage Âä†ËΩΩÊï∞ÊçÆ\nVariousTokensTable.getItem<any>(IS_WATCH_LIST).then(isWatchList => {\n  console.log('üöÄ ~ VariousTokensTable isWatchList:', isWatchList)\n  if (typeof isWatchList === 'boolean') {\n    usePoolsStore.getState().setIsWatchList(isWatchList)\n  } else {\n    usePoolsStore.getState().setIsWatchList(false)\n  }\n})\n// ‰ªé localForage Âä†ËΩΩÊï∞ÊçÆ\nVariousTokensTable.getItem<any>(IS_ALL_POOLS).then(isAllPools => {\n  console.log('üöÄ ~ VariousTokensTable isAllPools:', isAllPools)\n  if (typeof isAllPools === 'boolean') {\n    usePoolsStore.getState().setIsAllPools(isAllPools)\n  }\n})\n// ‰ªé localForage Âä†ËΩΩÊï∞ÊçÆ\nVariousTokensTable.getItem<any>(IS_INCENTIVIZED_ONLY).then(isIncentivizedOnly => {\n  console.log('üöÄ ~ VariousTokensTable isIncentivizedOnly:', isIncentivizedOnly)\n  if (typeof isIncentivizedOnly === 'boolean') {\n    usePoolsStore.getState().setIsIncentivizedOnly(isIncentivizedOnly)\n  }\n})\n// ‰ªé localForage Âä†ËΩΩÊï∞ÊçÆ\nVariousTokensTable.getItem<any>(POOL_SELECT_COIN_LIST).then(poolSelectCoinList => {\n  console.log('üöÄ ~ VariousTokensTable poolSelectCoinList:', poolSelectCoinList)\n  if (poolSelectCoinList && poolSelectCoinList.length > 0) {\n    usePoolsStore.getState().setSelectCoinList(poolSelectCoinList)\n  }\n})\n","import { StatsPoolsPath } from '@/apis/path'\nimport usePoolsStore from '@/store/pool'\nimport { useGlobalToast } from '@cetus/design'\nimport { useFetch } from '@cetus/hooks'\nimport { CommonTypeInfo, ToastType } from '@cetus/types'\nimport useGetPoolList, { GetPoolListParams } from './useGetPoolList'\nimport useWrapPoolData from './useWrapPoolData'\n\nexport interface GetFavoritePoolListProps extends GetPoolListParams {\n  pools?: string[]\n  needLocalData?: boolean\n}\nexport default function useFavoritePool() {\n  const { fetchByApi } = useFetch()\n  const { getLocalJsonPoolList, wrapGetPoolParams } = useGetPoolList()\n  const { wrapPoolDataV2 } = useWrapPoolData()\n  const { poolFavoriteIds, setPoolFavoriteId, setPoolFavoriteIds, setPoolFavoriteIdsChange } = usePoolsStore()\n  const { successTsToast, failedTsToast } = useGlobalToast()\n  const addFavorites = (id: string) => {\n    const info: ToastType = {\n      linkLabel: '',\n      getShowInfo: () => {\n        const info: CommonTypeInfo = {\n          toastTitleText: poolFavoriteIds.length >= 100 ? 'Watchlist exceeds the maximum limit' : 'Added to Watchlist'\n        }\n        return info\n      }\n    }\n    if (poolFavoriteIds.length >= 100) {\n      failedTsToast(info)\n    } else {\n      setPoolFavoriteId(id)\n      setPoolFavoriteIdsChange(true)\n      successTsToast(info)\n    }\n  }\n\n  const removeFavorites = (id: string) => {\n    const newList = poolFavoriteIds?.filter((item: string) => item !== id)\n    setPoolFavoriteIds(newList)\n    setPoolFavoriteIdsChange(true)\n    const info: ToastType = {\n      linkLabel: '',\n      getShowInfo: () => {\n        const info: CommonTypeInfo = {\n          toastTitleText: 'Removed from Watchlist'\n        }\n        return info\n      }\n    }\n    successTsToast(info)\n  }\n  const getFavoritePoolList = async (params: GetFavoritePoolListProps) => {\n    // toDo: ËØ∑Ê±ÇÂêéÁ´ØÊñ∞Êé•Âè£Ôºå‰º†ÂÖ•Êî∂ËóèÂàóË°®ÔºåËøîÂõûÊ±†Â≠êÂàóË°®, ÊúÄÁªàÊï∞ÊçÆË¶ÅÂåÖË£ÖÁöÑÂíåpoolList‰∏ÄÊ†∑\n    const { needLocalData = true } = params\n    const pools = params?.pools || []\n    const warapApiParams = wrapGetPoolParams(params)\n    if (pools.length > 0) {\n      try {\n        const res = await fetchByApi(StatsPoolsPath, 'POST', warapApiParams)\n        console.log('üöÄüöÄüöÄ ~ useFavoritePool.ts:61 ~ getFavoritePoolList ~ res:', res)\n        if (res?.data) {\n          console.log('üöÄ ~ getFavoritePoolList ~ res?.data:', res?.data)\n          const poolList = res?.data?.list?.map((item: any) => {\n            return wrapPoolDataV2(item)\n          })\n          return {\n            list: poolList,\n            total: res?.data?.total\n          }\n        }\n      } catch (error) {\n        console.log('üöÄ ~ getFavoritePoolList ~ error:', error)\n        if (needLocalData) {\n          return await getLocalJsonPoolList(params)\n        }\n      }\n    }\n    return {\n      list: [],\n      total: 0\n    }\n  }\n  return {\n    addFavorites,\n    removeFavorites,\n    getFavoritePoolList\n  }\n}\n"],"names":["store","set","get","data","isWatchList","VariousTokensTable","IS_WATCH_LIST","isAllPools","IS_ALL_POOLS","isIncentivizedOnly","IS_INCENTIVIZED_ONLY","id","newPoolFavoriteIds","POOL_FAVORITE_LIST","ids","selectCoinList","POOL_SELECT_COIN_LIST","usePoolsStore","create","savedPoolFavoriteList","poolSelectCoinList","useFavoritePool","fetchByApi","useFetch","getLocalJsonPoolList","wrapGetPoolParams","useGetPoolList","wrapPoolDataV2","useWrapPoolData","poolFavoriteIds","setPoolFavoriteId","setPoolFavoriteIds","setPoolFavoriteIdsChange","successTsToast","failedTsToast","useGlobalToast","info","newList","item","params","needLocalData","pools","warapApiParams","res","StatsPoolsPath","_b","_a","_c","error"],"mappings":"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"}