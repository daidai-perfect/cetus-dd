{"version":3,"mappings":"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","names":["notifi_tab_bg","notifi_tab_bg_h5","codeList","FormItem","label","children","jsxs","InputGroup","jsx","InputLeftAddon","Box","Divider","Notifications","email","setEmail","useState","telegramId","setTelegramId","areaCode","setAreaCode","phone","setPhone","oldEmail","setOldEmail","oldTelegramId","setOldTelegramId","oldAreaCode","setOldAreaCode","oldPhone","setOldPhone","isShowNotifi","setIsShowNotifi","notifiLoginLoading","notifiStatus","emailTarget","telegramTarget","smsTarget","useNotifiStore","emailTargetId","setEmailTargetId","verifiTelegramUrl","setVerifiTelegramUrl","isVerifiTelegram","setIsVerifiTelegram","isVerifiEmail","setIsVerifiEmail","currentAccount","onWalletModal","useAccountStore","isMenuOpen","setIsMenuOpen","notifiLogin","useIntNotifi","ensureTargetGroup","useGetNotifiTargetGroups","isValidEmail","setIsValidEmail","sendEmailSuccess","setSendEmailSuccess","verifyEmail","value","emailPattern","onSubscribe","targetGroupParams","useEffect","lastEmail","lastTelegramId","lastSmsTarget","lastAreaCode","lastPhone","subscribeDisabled","useMemo","notifiClient","sendEmailNum","setSendEmailNum","sendTgNum","setSendTgNum","sendEmailTargetVerificationRequest","sendTelegramTargetVerificationRequest","setSendTelegramSuccess","sendTelegramSuccess","intervalId","prevEmailNum","prevTgNum","currentTab","setCurrentTab","isApp","useWindowWidth","Popover","PopoverTrigger","Icon","Portal","PopoverContent","HStack","VStack","Image","PopoverBody","Text","Input","e","Flex","Menu","isOpen","Fragment","MenuButton","Button","MenuList","code","MenuItem","PopoverFooter","H5Menus","lazy","ConnectButton","__vitePreload","H5Actions","menus","logo","setting","notifications","jump","isCetusPump","menuOpen","setMenuOpen","Suspense","SwapWidgetDisplay","props","h","icon","borderRadius","color","isSwapWidgetDisplay","setIsSwapWidgetDisplay","useWebConfigStore","Switch","ListItem","onClick","isActive","ExplorerContent","closeModal","isH5","explorerList","currentExplorer","switchExplorer","useRpcConfigStore","list","successTsToast","useGlobalToast","handleChangExplorer","item","status","CheckBox","PCSettingItem","rest","PCPreferred","onShowOptions","showOptions","showMainSetting","useRpcWorker","worker","setRpcSpeed","useInterval","startTestRpc","defaultNodes","rpc","event","RPCContent","rpcSpeed","regTest","val","nodes","currentNode","switchNode","isCheckCustom","setIsCheckCustom","inputValue","setInputValue","nodeList","handleChangeNode","rpcSpeedColor","useCallback","speed","isAvailableObject","InputRightAddon","PCRPCNode","PCSettings","swapWidgetDisplay","preferred","onOpen","onClose","useDisclosure","title","setTitle","handleTitleChange","onBackMainSetting","PopoverHeader","PopoverCloseButton","PCActions","UserActions"],"ignoreList":[],"sources":["../../../../../../../../../images/notifi_tab_bg.png","../../../../../../../../../images/notifi_tab_bg_h5.png","../../../cetus-design/src/components/nav/Notifications.tsx","../../../cetus-design/src/components/nav/userActions/H5.tsx","../../../cetus-design/src/components/nav/settings/SwapWidgetDisplay.tsx","../../../cetus-design/src/components/nav/settings/ListItem.tsx","../../../cetus-design/src/components/nav/settings/ExplorerContent.tsx","../../../cetus-design/src/components/nav/settings/pc/Item.tsx","../../../cetus-design/src/components/nav/settings/pc/Preferred.tsx","../../../cetus-design/src/hook/useRpcWorker.ts","../../../cetus-design/src/components/nav/settings/RPCContent.tsx","../../../cetus-design/src/components/nav/settings/pc/RPCNode.tsx","../../../cetus-design/src/components/nav/settings/pc/index.tsx","../../../cetus-design/src/components/nav/userActions/PC.tsx","../../../cetus-design/src/components/nav/userActions/index.tsx"],"sourcesContent":["export default \"__VITE_PUBLIC_ASSET__aee2e807__\"","export default \"__VITE_PUBLIC_ASSET__193d7894__\"","import useGetNotifiTargetGroups from '@/hook/useNotifi/useGetNotifiTargetGroups'\nimport useIntNotifi from '@/hook/useNotifi/useInitNotifi'\nimport useWindowWidth from '@cetus/hooks/src/useWindowWidth'\nimport { useAccountStore } from '@cetus/stores'\nimport useNotifiStore from '@cetus/stores/src/notifi'\nimport { Icon } from '@cetus/ui-kit'\nimport {\n  Box,\n  Button,\n  Divider,\n  Flex,\n  HStack,\n  Image,\n  Input,\n  InputGroup,\n  InputLeftAddon,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  Popover,\n  PopoverBody,\n  PopoverContent,\n  PopoverFooter,\n  PopoverTrigger,\n  Portal,\n  Text,\n  VStack\n} from '@chakra-ui/react'\nimport { useEffect, useMemo, useState } from 'react'\nimport notifi_tab_bg from '/images/notifi_tab_bg.png'\nimport notifi_tab_bg_h5 from '/images/notifi_tab_bg_h5.png'\n\ninterface IFormItemProps {\n  children: React.ReactNode\n  label: string\n}\n\nconst codeList = [\n  '+1',\n  '+32',\n  '+33',\n  '+34',\n  '+351',\n  '+354',\n  '+358',\n  '+36',\n  '+41',\n  '+43',\n  '+44',\n  '+45',\n  '+46',\n  '+47',\n  '+48',\n  '+49',\n  '+60',\n  '+61',\n  '+63',\n  '+65',\n  '+82',\n  '+852',\n  '+886'\n]\n\nconst FormItem = ({ label, children }: IFormItemProps) => {\n  return (\n    <InputGroup h=\"42px\" borderRadius=\"8px\" p=\"10px 12px\" bg=\"#141414\" border=\"1px solid\" borderColor=\"border\">\n      <InputLeftAddon fontSize=\"14px\" h=\"20px\" lineHeight=\"20px\" w=\"106px\">\n        {label}\n      </InputLeftAddon>\n      <Box borderColor=\"border\" pr=\"16px\">\n        <Divider orientation=\"vertical\" />\n      </Box>\n\n      {children}\n    </InputGroup>\n  )\n}\n\ntype TargetGroupParamsType = {\n  emailAddress?: string\n  phoneNumber?: string\n  telegramId?: string\n}\n\nfunction Notifications() {\n  // 当前输入\n  const [email, setEmail] = useState('')\n  const [telegramId, setTelegramId] = useState('')\n  const [areaCode, setAreaCode] = useState('')\n  const [phone, setPhone] = useState('')\n  // 当前设置\n  const [oldEmail, setOldEmail] = useState('')\n  const [oldTelegramId, setOldTelegramId] = useState('')\n  const [oldAreaCode, setOldAreaCode] = useState('')\n  const [oldPhone, setOldPhone] = useState('')\n  //\n  const { isShowNotifi, setIsShowNotifi, notifiLoginLoading, notifiStatus, emailTarget, telegramTarget, smsTarget } = useNotifiStore()\n  // 邮箱targetid 接受验证邮件用到\n  const [emailTargetId, setEmailTargetId] = useState('')\n  // 验证tg的url\n  const [verifiTelegramUrl, setVerifiTelegramUrl] = useState('')\n  // 是否验证tg\n  const [isVerifiTelegram, setIsVerifiTelegram] = useState(true)\n  // 是否验证email\n  const [isVerifiEmail, setIsVerifiEmail] = useState(false)\n  const { currentAccount, onWalletModal } = useAccountStore()\n  const [isMenuOpen, setIsMenuOpen] = useState(false)\n  const { notifiLogin } = useIntNotifi()\n  const { ensureTargetGroup } = useGetNotifiTargetGroups()\n  // 邮箱格式是否正确\n  const [isValidEmail, setIsValidEmail] = useState(true)\n  // 发送验证邮件是否成功\n  const [sendEmailSuccess, setSendEmailSuccess] = useState(false)\n\n  const verifyEmail = (value: string) => {\n    if (value) {\n      const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n      console.log('🚀🚀🚀 ~ Notifications.tsx:99 ~ verifyEmail ~ verifyEmail:')\n      setIsValidEmail(emailPattern.test(email))\n    }\n  }\n\n  const onSubscribe = () => {\n    const targetGroupParams: TargetGroupParamsType = {}\n    if (areaCode && phone) {\n      targetGroupParams.phoneNumber = areaCode + ' ' + phone\n    }\n    if (email) {\n      targetGroupParams.emailAddress = email\n    }\n    if (telegramId) {\n      targetGroupParams.telegramId = telegramId\n    }\n    if (notifiStatus == 'authenticated') {\n      ensureTargetGroup(targetGroupParams)\n    } else {\n      notifiLogin(targetGroupParams)\n    }\n  }\n\n  useEffect(() => {\n    if (!emailTarget) {\n      setEmailTargetId('')\n      setIsVerifiEmail(false)\n      setEmail('')\n      setOldEmail('')\n      return\n    }\n    const lastEmail = emailTarget?.emailAddress || ''\n    // 是否验证邮箱\n    const isVerifiEmail = emailTarget?.isConfirmed || false\n    // emaile target id 发送验证邮件时使用\n    const emailTargetId = emailTarget?.id || ''\n    setEmailTargetId(emailTargetId)\n    setIsVerifiEmail(isVerifiEmail)\n    setEmail(lastEmail)\n    setOldEmail(lastEmail)\n  }, [emailTarget])\n\n  useEffect(() => {\n    if (!telegramTarget) {\n      setIsVerifiTelegram(false)\n      setVerifiTelegramUrl('')\n      setTelegramId('')\n      setOldTelegramId('')\n      return\n    }\n    const lastTelegramId = telegramTarget?.telegramId || ''\n    //   // 是否验证tg\n    const isVerifiTelegram = telegramTarget?.isConfirmed || false\n    //   // tg验证url\n    const verifiTelegramUrl = telegramTarget.confirmationUrl || ''\n    setIsVerifiTelegram(isVerifiTelegram)\n    setVerifiTelegramUrl(verifiTelegramUrl)\n    setTelegramId(lastTelegramId)\n    setOldTelegramId(lastTelegramId)\n  }, [telegramTarget])\n\n  useEffect(() => {\n    if (!smsTarget) {\n      setAreaCode('+1')\n      setPhone('')\n      setOldAreaCode('+1')\n      setOldPhone('')\n    }\n    const lastSmsTarget = smsTarget?.name || ''\n    const lastAreaCode = lastSmsTarget.split(' ')[0] || '+1'\n    const lastPhone = lastSmsTarget.split(' ')[1] || ''\n    setAreaCode(lastAreaCode)\n    setPhone(lastPhone)\n    setOldAreaCode(lastAreaCode)\n    setOldPhone(lastPhone)\n  }, [smsTarget])\n\n  const subscribeDisabled = useMemo(() => {\n    if (!phone && !email && !telegramId) {\n      return true\n    } else if (areaCode == oldAreaCode && phone == oldPhone && email == oldEmail && telegramId == oldTelegramId) {\n      return true\n    } else if (!isValidEmail) {\n      return true\n    } else {\n      return false\n    }\n  }, [email, oldEmail, areaCode, oldAreaCode, phone, oldPhone, telegramId, oldTelegramId])\n\n  const { notifiClient } = useNotifiStore()\n\n  const [sendEmailNum, setSendEmailNum] = useState(60)\n  const [sendTgNum, setSendTgNum] = useState(60)\n  const sendEmailTargetVerificationRequest = async () => {\n    notifiClient.sendEmailTargetVerification({ targetId: emailTargetId })\n    setSendEmailSuccess(true)\n  }\n\n  const sendTelegramTargetVerificationRequest = () => {\n    setSendTelegramSuccess(true)\n    window.open(verifiTelegramUrl, '_blank')\n  }\n\n  const [sendTelegramSuccess, setSendTelegramSuccess] = useState(false)\n\n  useEffect(() => {\n    // 倒计时结束时不再更新\n    if (!sendEmailSuccess || sendEmailNum === 0) {\n      setSendEmailSuccess(false)\n      return\n    }\n    const intervalId = setInterval(() => {\n      setSendEmailNum(prevEmailNum => prevEmailNum - 1)\n    }, 1000)\n    // 清除定时器\n    return () => clearInterval(intervalId)\n  }, [sendEmailSuccess, sendEmailNum])\n\n  useEffect(() => {\n    // 倒计时结束时不再更新\n    if (!sendTelegramSuccess || sendTgNum === 0) {\n      setSendTelegramSuccess(false)\n      return\n    }\n    const intervalId = setInterval(() => {\n      setSendTgNum(prevTgNum => prevTgNum - 1)\n    }, 1000)\n    // 清除定时器\n    return () => clearInterval(intervalId)\n  }, [sendTelegramSuccess, sendTgNum])\n  const [currentTab, setCurrentTab] = useState('notifi')\n  const { isApp } = useWindowWidth()\n  useEffect(() => {\n    if (isShowNotifi) {\n      setCurrentTab('notifi')\n    }\n  }, [isShowNotifi])\n  return (\n    // ui注释部分使用notifi控件时可用\n    // <Popover isLazy placement=\"bottom-end\" offset={[42, 10]} onClose={() => setIsShowNotifi(false)}>\n    <Popover\n      isLazy\n      isOpen={isShowNotifi}\n      placement=\"bottom-end\"\n      offset={[44, 10]}\n      onClose={\n        isMenuOpen\n          ? () => {\n              console.log('isMenuOpen')\n            }\n          : () => {\n              setIsShowNotifi(false)\n            }\n      }\n    >\n      <PopoverTrigger>\n        <Box\n          w=\"36px\"\n          h=\"36px\"\n          p=\"7px\"\n          bg=\"bg_secondary\"\n          borderRadius=\"8px\"\n          border=\"1px solid\"\n          borderColor=\"border\"\n          cursor=\"pointer\"\n          _hover={{\n            bg: 'button_outline_hov_bg',\n            svg: {\n              fill: 'text_caption'\n            }\n          }}\n          onClick={() => (currentAccount?.address ? setIsShowNotifi(!isShowNotifi) : onWalletModal(true))}\n        >\n          <Icon xlinkHref=\"#icon-icon_notification\" variant=\"gray\" />\n        </Box>\n      </PopoverTrigger>\n      <Portal>\n        <PopoverContent p=\"0px\" border=\"1px solid\" borderRadius=\"12px\" borderColor=\"border\" minW={{ base: '352px', lg: '460px' }}>\n          <HStack flexDirection={{ base: 'column', lg: 'row' }} gap=\"0\" bg=\"bg_seven\" borderRadius=\"12px\" align=\"flex-start\">\n            <VStack pt={{ base: '8px', lg: '28px' }} pl={{ base: '12px', lg: '0' }} gap=\"0\" flexDirection={{ base: 'row', lg: 'column' }}>\n              <HStack\n                align=\"center\"\n                justify=\"center\"\n                backgroundImage={currentTab == 'notifi' ? (isApp ? notifi_tab_bg_h5 : notifi_tab_bg) : ''}\n                backgroundSize=\"cover\"\n                backgroundPosition=\"center\"\n                backgroundRepeat=\"no-repeat\"\n                zIndex={currentTab == 'notifi' ? '999' : '0'}\n                mr={{ base: '0', lg: '-5px' }}\n                mb={{ base: '-4px', lg: '0' }}\n                p=\"0 12px\"\n                w={{ base: '148px', lg: '105px' }}\n                h={{ base: '40px', lg: '90px' }}\n                cursor=\"pointer\"\n                onClick={() => setCurrentTab('notifi')}\n              >\n                <Image src={currentTab == 'notifi' ? '/images/notifi@2x.png' : '/images/logo_not_nor@2x.png'} h=\"20px\" w=\"60px\" minW=\"60px\" />\n              </HStack>\n              <HStack\n                align=\"center\"\n                justify=\"center\"\n                backgroundImage={currentTab == 'pawtato' ? (isApp ? notifi_tab_bg_h5 : notifi_tab_bg) : ''}\n                backgroundSize=\"cover\"\n                backgroundPosition=\"center\"\n                backgroundRepeat=\"no-repeat\"\n                zIndex={currentTab == 'pawtato' ? '999' : '0'}\n                mr={{ base: '0', lg: '-5px' }}\n                mb={{ base: '-4px', lg: '0' }}\n                p=\"0 12px\"\n                w={{ base: '148px', lg: '105px' }}\n                h={{ base: '40px', lg: '90px' }}\n                cursor=\"pointer\"\n                onClick={() => setCurrentTab('pawtato')}\n              >\n                <Image src={currentTab == 'pawtato' ? '/images/logo_paw_sel@2x.png' : '/images/logo_paw_nor@2x.png'} h=\"11px\" w=\"66px\" minW=\"66px\" />\n              </HStack>\n            </VStack>\n            {currentTab == 'notifi' && (\n              <VStack p=\"16px\" bg=\"bg_secondary\" borderRadius=\"12px\" minW=\"350px\">\n                <PopoverBody p=\"0\" borderRadius=\"12px\">\n                  <VStack gap=\"12px\">\n                    <Text fontWeight=\"500\" color=\"text_caption\" textAlign=\"left\" w=\"100%\" mb=\"4px\">\n                      Notifications Setting\n                    </Text>\n                    <FormItem label=\"Email address\">\n                      <Input\n                        type=\"email\"\n                        placeholder=\"Email address\"\n                        fontSize=\"14px\"\n                        h=\"20px\"\n                        lineHeight=\"20px\"\n                        value={email}\n                        onFocus={() => setIsValidEmail(true)}\n                        onBlur={e => verifyEmail(e.target.value)}\n                        onChange={e => setEmail(e.target.value)}\n                      />\n                    </FormItem>\n                    {!isValidEmail && (\n                      <Text w=\"100%\" color=\"primary_red\" lineHeight=\"20px\" textAlign=\"left\">\n                        Please enter a valid email address\n                      </Text>\n                    )}\n\n                    {notifiStatus == 'authenticated' && oldEmail && (sendEmailSuccess || (!sendEmailSuccess && !isVerifiEmail)) && (\n                      <Flex width=\"100%\">\n                        {sendEmailSuccess && (\n                          <Text width=\"100%\" textAlign=\"right\">\n                            Verification email sent! ({sendEmailNum}s)\n                          </Text>\n                        )}\n                        {!isVerifiEmail && !sendEmailSuccess && (\n                          <Text fontSize=\"12px\" width=\"100%\" textAlign=\"right\">\n                            Waiting for email verification.{' '}\n                            <Text color=\"primary\" as=\"span\" fontSize=\"12px\" cursor=\"pointer\" onClick={() => sendEmailTargetVerificationRequest()}>\n                              Retry\n                            </Text>\n                          </Text>\n                        )}\n                      </Flex>\n                    )}\n\n                    <FormItem label=\"Phone number\">\n                      <Menu isLazy onClose={() => setIsMenuOpen(false)}>\n                        {({ isOpen }) => (\n                          <>\n                            <MenuButton\n                              isActive={isOpen}\n                              as={Button}\n                              rightIcon={<Icon xlinkHref=\"#icon-icon_arrow\" fontSize=\"12px\" />}\n                              variant=\"unstyled\"\n                              h=\"100%\"\n                              fontSize=\"14px\"\n                              lineHeight=\"20px\"\n                              color=\"text_caption\"\n                              onClick={() => setIsMenuOpen(!isMenuOpen)}\n                            >\n                              {areaCode}\n                            </MenuButton>\n                            <Portal>\n                              <MenuList h=\"220px\" overflow=\"auto\" zIndex=\"99999\">\n                                {codeList.map(code => (\n                                  <MenuItem\n                                    key={code}\n                                    onClick={e => {\n                                      // e.stopPropagation()\n                                      setAreaCode(code)\n                                    }}\n                                  >\n                                    {code}\n                                  </MenuItem>\n                                ))}\n                              </MenuList>\n                            </Portal>\n                          </>\n                        )}\n                      </Menu>\n                      <Input\n                        type=\"tel\"\n                        placeholder=\"Phone number\"\n                        pl=\"16px\"\n                        fontSize=\"14px\"\n                        h=\"20px\"\n                        lineHeight=\"20px\"\n                        value={phone}\n                        onChange={e => setPhone(e.target.value)}\n                      />\n                    </FormItem>\n                    <FormItem label=\"Telegram ID\">\n                      <Input\n                        placeholder=\"Telegram ID\"\n                        fontSize=\"14px\"\n                        h=\"20px\"\n                        lineHeight=\"20px\"\n                        value={telegramId}\n                        onChange={e => setTelegramId(e.target.value)}\n                      />\n                    </FormItem>\n                    {notifiStatus == 'authenticated' && oldTelegramId && (sendTelegramSuccess || (!sendTelegramSuccess && !isVerifiTelegram)) && (\n                      <Flex width=\"100%\">\n                        {sendTelegramSuccess && (\n                          <Text width=\"100%\" textAlign=\"right\">\n                            Verification telegram sent! ({sendTgNum}s)\n                          </Text>\n                        )}\n                        {!isVerifiTelegram && !sendTelegramSuccess && (\n                          <Text fontSize=\"12px\" width=\"100%\" textAlign=\"right\">\n                            Waiting for telegram verification.{' '}\n                            <Text color=\"primary\" as=\"span\" fontSize=\"12px\" cursor=\"pointer\" onClick={() => sendTelegramTargetVerificationRequest()}>\n                              Retry\n                            </Text>\n                          </Text>\n                        )}\n                      </Flex>\n                    )}\n                  </VStack>\n                </PopoverBody>\n                <PopoverFooter border=\"none\" p=\"0\" mt=\"16px\">\n                  <VStack w=\"100%\" gap=\"12px\">\n                    <Button\n                      w=\"100%\"\n                      h=\"42px\"\n                      borderRadius=\"8px\"\n                      fontWeight=\"500\"\n                      fontSize=\"14px\"\n                      onClick={onSubscribe}\n                      isLoading={notifiLoginLoading}\n                      disabled={subscribeDisabled || notifiLoginLoading || !isValidEmail}\n                    >\n                      {notifiStatus == 'authenticated' ? 'Update' : 'Subscribe'}\n                    </Button>\n                    <Box>\n                      <Text fontSize=\"12px\" color=\"text_paragraph\" lineHeight=\"20px\">\n                        Notifications are provided by Notifi. By subscribing, you agree that info you provide to Notifi will be governed by its{' '}\n                        <Text\n                          fontSize=\"12px\"\n                          textDecoration=\"underline\"\n                          as=\"span\"\n                          cursor=\"pointer\"\n                          onClick={() => {\n                            window.open('https://notifi.network/privacy', '_blank')\n                          }}\n                        >\n                          Privacy Policy\n                        </Text>{' '}\n                        and{' '}\n                        <Text\n                          fontSize=\"12px\"\n                          textDecoration=\"underline\"\n                          as=\"span\"\n                          cursor=\"pointer\"\n                          onClick={() => {\n                            window.open('https://notifi.network/term', '_blank')\n                          }}\n                        >\n                          Terms of Use.\n                        </Text>\n                      </Text>\n                      <HStack justify=\"center\" mt=\"16px\">\n                        <Text fontSize=\"14px\" color=\"text_paragraph\">\n                          Powered by\n                        </Text>\n                        <Image src=\"/images/notifi@2x.png\" h=\"20px\" />\n                      </HStack>\n                    </Box>\n                  </VStack>\n                </PopoverFooter>\n              </VStack>\n            )}\n            {currentTab == 'pawtato' && (\n              <PopoverBody p=\"16px\" bg=\"bg_secondary\" borderRadius=\"12px\" minW=\"350px\" h=\"314px\">\n                <VStack h=\"100%\" gap=\"28px\" justify=\"center\" align=\"center\">\n                  <Text color=\"text_caption\" lineHeight=\"20px\" textAlign=\"center\">\n                    Visit Pawtato to manage notification settings for LP Range Alert{' '}\n                  </Text>\n                  <Button w=\"100%\" h=\"40px\" fontWeight=\"500\" fontSize=\"14px\" onClick={() => window.open('https://pawtato.app/board')}>\n                    Subscribe\n                  </Button>\n                </VStack>\n              </PopoverBody>\n            )}\n          </HStack>\n        </PopoverContent>\n      </Portal>\n    </Popover>\n  )\n}\n\nexport default Notifications\n","import { Icon } from '@cetus/ui-kit'\nimport { Box, Flex } from '@chakra-ui/react'\nimport { lazy, Suspense, useState } from 'react'\n\nimport Notifications from '../Notifications'\nimport { UserActionProps } from '../type'\nconst H5Menus = lazy(() => import('../menus/H5Menus'))\nconst ConnectButton = lazy(() => import('@/components/wallet/ConnectButton'))\n\nconst H5Actions = ({ menus, logo, setting, notifications, jump, isCetusPump, children }: UserActionProps) => {\n  const [menuOpen, setMenuOpen] = useState<boolean>(false)\n  return (\n    <>\n      <Flex align=\"center\" gap=\"8px\">\n        {/* {chain && <SwitchChain {...chain} />} */}\n        {/* {isCetusPump && <BackButton w=\"114px\" h=\"36px\" text=\"Back to DEX\" onClick={() => jump('/')} />} */}\n        <Suspense fallback={<div />}>\n          <ConnectButton isCetusPump={isCetusPump} />\n        </Suspense>\n        {notifications && <Notifications />}\n        <Box\n          w=\"36px\"\n          h=\"36px\"\n          p=\"7px\"\n          bg=\"bg_secondary\"\n          borderRadius=\"8px\"\n          border=\"1px solid\"\n          borderColor=\"border\"\n          cursor=\"pointer\"\n          _hover={{ bg: 'button_outline_hov_bg' }}\n        >\n          <Icon xlinkHref=\"#icon-icon_menu\" onClick={() => setMenuOpen(!menuOpen)} />\n        </Box>\n      </Flex>\n      <H5Menus\n        menus={menus!}\n        logo={logo!}\n        setting={setting}\n        jump={jump!}\n        isCetusPump={isCetusPump}\n        isOpen={menuOpen}\n        onClose={() => setMenuOpen(false)}\n      >\n        {children}\n      </H5Menus>\n    </>\n  )\n}\n\nexport default H5Actions\n","import useWebConfigStore from '@cetus/stores/src/useWebConfigStore'\nimport { HStack, Image, Switch, Text } from '@chakra-ui/react'\n\ntype SwapWidgetDisplayProps = {\n  h: string\n  icon: string\n  borderRadius?: string\n  color?: string\n}\n\nexport function SwapWidgetDisplay(props: SwapWidgetDisplayProps) {\n  const { h, icon, borderRadius = '12px', color = 'text_caption' } = props\n  const { isSwapWidgetDisplay, setIsSwapWidgetDisplay } = useWebConfigStore()\n  return (\n    <HStack\n      w=\"100%\"\n      pl=\"16px\"\n      pr=\"16px\"\n      h={h}\n      border=\"1px solid\"\n      borderColor=\"border\"\n      bg=\"menu_item_bg\"\n      justifyContent=\"center\"\n      gap=\"24px\"\n      borderRadius={borderRadius}\n    >\n      <HStack w=\"100%\" gap=\"8px\">\n        <Image\n          draggable=\"false\"\n          src={icon}\n          fallbackSrc=\"/images/placeholder-token@2x.png\"\n          w=\"24px\"\n          h=\"24px\"\n          pointerEvents=\"none\" // Prevent click events on the image\n        />\n        <Text color={color} fontSize=\"14px\">\n          Display swap widget\n        </Text>\n      </HStack>\n\n      <Switch isChecked={isSwapWidgetDisplay} onChange={() => setIsSwapWidgetDisplay(!isSwapWidgetDisplay)} />\n    </HStack>\n  )\n}\n","import { Box, Text } from '@chakra-ui/react'\nimport { ISettingOption } from './type'\n\nconst ListItem = ({ label, value, onClick, isActive }: ISettingOption) => {\n  return (\n    <Box\n      w=\"100%\"\n      onClick={onClick}\n      cursor=\"pointer\"\n      h=\"48px\"\n      lineHeight=\"48px\"\n      p=\"0px 16px\"\n      borderRadius=\"12px\"\n      border=\"1px solid\"\n      borderColor={isActive ? 'primary_hover' : 'transparent'}\n      _hover={{ bg: 'menu_item_hover_bg' }}\n    >\n      <Text fontSize=\"14px\" color=\"text_caption\">\n        {label}\n      </Text>\n    </Box>\n  )\n}\n\nexport default ListItem\n","import useRpcConfigStore from '@cetus/stores/src/useRpcConfigStore'\nimport { CommonTypeInfo, ExplorerItem, ToastType, TransactionStatusType } from '@cetus/types'\nimport { CheckBox } from '@cetus/ui-kit'\nimport { HStack, Text, VStack } from '@chakra-ui/react'\nimport { useMemo } from 'react'\nimport { useGlobalToast } from '../../../hooks'\nimport ListItem from './ListItem'\n\nconst ExplorerContent = ({ closeModal, isH5 }: { closeModal: () => void; isH5?: boolean }) => {\n  const { explorerList, currentExplorer, switchExplorer } = useRpcConfigStore()\n  const list = useMemo(() => {\n    console.log('🚀 ~ list ~ explorerList:', explorerList)\n    return explorerList\n  }, [explorerList])\n  const { successTsToast } = useGlobalToast()\n  const handleChangExplorer = (item: ExplorerItem) => {\n    switchExplorer(item)\n    closeModal()\n    const info: ToastType = {\n      linkLabel: '',\n      getShowInfo: (status: TransactionStatusType): CommonTypeInfo => {\n        const info: CommonTypeInfo = {\n          toastTitleText: `Explorer update`,\n          toastDescriptionContent: () => (\n            <Text fontSize=\"14px\" color=\"primary_gray\">\n              {`Explorer is currently set to `}\n              <Text as=\"span\" fontSize=\"14px\" color=\"primary_gray\" wordBreak=\"break-all\">\n                {item.name}\n              </Text>\n            </Text>\n          )\n        }\n        return info\n      }\n    }\n    successTsToast(info)\n  }\n  return (\n    <>\n      {!isH5 ? (\n        <VStack w=\"100%\">\n          {list.map((item: ExplorerItem) => {\n            return (\n              <ListItem\n                key={item.link}\n                label={item.name}\n                value={item.link}\n                isActive={item.link === currentExplorer.link}\n                onClick={() => handleChangExplorer(item)}\n              />\n            )\n          })}\n        </VStack>\n      ) : (\n        <VStack gap=\"16px\" mb=\"16px\">\n          {list.map(item => {\n            return (\n              <HStack w=\"100%\" key={item.link}>\n                <CheckBox checked={item.link === currentExplorer.link} onClick={() => handleChangExplorer(item)} />\n                <Text fontSize={{ base: '16px', lg: '14px' }}>{item.name}</Text>\n              </HStack>\n            )\n          })}\n        </VStack>\n      )}\n    </>\n  )\n}\n\nexport default ExplorerContent\n","import { Icon } from '@cetus/ui-kit'\nimport { HStack, Text, VStack } from '@chakra-ui/react'\nimport { ISettingItemProps } from '../type'\n\nconst PCSettingItem = ({ icon, label, ...rest }: ISettingItemProps) => {\n  return (\n    <VStack w=\"100%\" p=\"16px\" borderRadius=\"12px\" border=\"1px solid\" borderColor=\"border\" bg=\"menu_item_bg\" justify=\"flex-start\" gap=\"24px\">\n      <HStack w=\"100%\" gap=\"8px\">\n        <Icon xlinkHref={icon} fontSize=\"20px\" />\n        <Text fontSize=\"14px\">{label}</Text>\n      </HStack>\n      {'children' in rest ? (\n        rest?.children\n      ) : (\n        <HStack w=\"100%\" justify=\"space-between\" cursor=\"pointer\" onClick={rest.onClick}>\n          <Text color=\"text_caption\" fontSize=\"14px\">\n            {rest.value}\n          </Text>\n          <Icon transform=\"rotate(270deg)\" xlinkHref=\"#icon-icon_arrow\" fontSize=\"12px\" variant=\"gray\" />\n        </HStack>\n      )}\n    </VStack>\n  )\n}\n\nexport default PCSettingItem\n","import useRpcConfigStore from '@cetus/stores/src/useRpcConfigStore'\nimport ExplorerContent from '../ExplorerContent'\nimport { IPCtemSettingInterface } from '../type'\nimport PCSettingItem from './Item'\n\ninterface PCPreferredProps extends IPCtemSettingInterface {\n  closeModal: () => void\n}\n\nconst PCPreferred = ({ onShowOptions, showOptions, showMainSetting, closeModal }: PCPreferredProps) => {\n  const { currentExplorer } = useRpcConfigStore()\n  return showOptions ? (\n    <ExplorerContent closeModal={closeModal} />\n  ) : (\n    showMainSetting && (\n      <PCSettingItem icon=\"#icon-icon_preferredexplorer\" label=\"Preferred Explorer\" value={currentExplorer?.name} onClick={onShowOptions} />\n    )\n  )\n}\n\nexport default PCPreferred\n","import { useInterval } from '@cetus/hooks'\nimport useRpcConfigStore from '@cetus/stores/src/useRpcConfigStore'\nimport { defaultNodes } from '@cetus/types'\nimport { useEffect } from 'react'\n\nexport function useRpcWorker() {\n  let worker: Worker | null = null\n  const { setRpcSpeed } = useRpcConfigStore()\n\n  useInterval({\n    interval: 5 * 1000,\n    callback: () => {\n      startTestRpc()\n    }\n  })\n\n  const startTestRpc = () => {\n    if (worker === null) {\n      worker = new Worker('/worker/rpc.worker.js')\n    }\n    worker.postMessage({\n      rpcList: defaultNodes.filter(rpc => rpc.link.length > 0).map(rpc => rpc.link)\n    })\n\n    worker.onmessage = event => {\n      if (event.data.error) {\n        console.log('🚀 ~ file: useRpcWorker.ts:15 ~ useEffect ~ event.data.error:', event.data.error)\n        setRpcSpeed({})\n      } else {\n        console.log('🚀 ~ file: useRpcWorker.ts:15 ~ useEffect ~ event.data:', event.data)\n        if (event.data) {\n          setRpcSpeed(event.data)\n        } else {\n          setRpcSpeed({})\n        }\n      }\n    }\n  }\n\n  useEffect(() => {\n    startTestRpc()\n\n    return () => {\n      if (worker) {\n        worker.terminate()\n      }\n    }\n  }, [])\n}\n","import { useRpcWorker } from '@/hook/useRpcWorker'\nimport useRpcConfigStore from '@cetus/stores/src/useRpcConfigStore'\nimport { CommonTypeInfo, RpcNode, ToastType, TransactionStatusType } from '@cetus/types'\nimport { CheckBox } from '@cetus/ui-kit'\nimport { isAvailableObject } from '@cetus/utils'\nimport { Box, Button, HStack, Input, InputGroup, InputRightAddon, Text, VStack } from '@chakra-ui/react'\nimport { useCallback, useMemo, useState } from 'react'\nimport { useGlobalToast } from '../../../hooks'\n\nconst RPCContent = ({ closeModal }: { closeModal: () => void }) => {\n  useRpcWorker()\n  const { rpcSpeed } = useRpcConfigStore()\n  const regTest = (val: any) => {\n    const reg = /^(http|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&:/~\\+#]*[\\w\\-\\@?^=%&/~\\+#])?/\n    return !reg.test(val)\n  }\n  const { nodes, currentNode, switchNode } = useRpcConfigStore()\n  const [isCheckCustom, setIsCheckCustom] = useState(currentNode?.name == 'Custom')\n  const [inputValue, setInputValue] = useState(currentNode?.name == 'Custom' ? currentNode?.link : '')\n  const nodeList = useMemo(() => {\n    return nodes\n  }, [nodes])\n  const { successTsToast } = useGlobalToast()\n  const handleChangeNode = (item: RpcNode) => {\n    console.log('🚀 ~ handleChangeNode ~ item:', item)\n    if (item.name !== 'Custom') {\n      setInputValue('')\n      setIsCheckCustom(false)\n    }\n    switchNode(item)\n    // closeModal()\n    const info: ToastType = {\n      linkLabel: '',\n      getShowInfo: (status: TransactionStatusType): CommonTypeInfo => {\n        const info: CommonTypeInfo = {\n          toastTitleText: `RPC update`,\n          toastDescriptionContent: () => (\n            <Text fontSize=\"14px\" color=\"primary_gray\">\n              {`RPC is currently set to `}\n              <Text as=\"span\" fontSize=\"14px\" color=\"primary_gray\" wordBreak=\"break-all\">\n                {item.name !== 'Custom' ? item.name : item.link}\n              </Text>\n            </Text>\n          )\n        }\n        return info\n      }\n    }\n    successTsToast(info)\n  }\n\n  const rpcSpeedColor = useCallback((speed: number) => {\n    if (speed === 0) {\n      return 'text_paragraph'\n    }\n\n    if (speed < 100) {\n      return 'primary_green'\n    }\n\n    if (speed > 200) {\n      return 'primary_red'\n    }\n\n    return 'primary_yellow'\n  }, [])\n\n  return (\n    <Box w=\"100%\" mt=\"-16px\">\n      {nodeList.map(item => {\n        const speed = Number(rpcSpeed[item?.link] || 0)\n        return (\n          <VStack mt=\"16px\" key={item?.link} align=\"flex-start\">\n            {item?.name !== 'Custom' && (\n              <HStack w=\"100%\" justifyContent=\"space-between\">\n                <HStack w=\"100%\" onClick={() => handleChangeNode(item)} _hover={{ p: { color: 'primary' } }}>\n                  <CheckBox checked={currentNode.name === item?.name} onClick={() => {}} />\n                  <Text\n                    cursor=\"pointer\"\n                    fontSize={{ base: '16px', lg: '14px' }}\n                    color={currentNode.name === item?.name ? 'primary' : 'text_paragraph'}\n                  >\n                    {item?.name}\n                  </Text>\n                </HStack>\n                <HStack gap=\"5px\">\n                  {speed > 0 && <Box w=\"6px\" h=\"6px\" bg={rpcSpeedColor(speed)} borderRadius=\"50%\" />}\n                  <Text fontSize=\"12px\" fontWeight=\"500\" color={rpcSpeedColor(speed)}>\n                    {rpcSpeed[item.link]}\n                    {isAvailableObject(rpcSpeed) ? 'ms' : ''}\n                  </Text>\n                </HStack>\n              </HStack>\n            )}\n          </VStack>\n        )\n      })}\n      <HStack w=\"100%\" mt=\"16px\" _hover={{ p: { color: 'primary' } }} onClick={() => setIsCheckCustom(!isCheckCustom)}>\n        <CheckBox checked={currentNode.name === 'Custom'} onClick={() => {}} />\n        <Text cursor=\"pointer\" fontSize={{ base: '16px', lg: '14px' }} color={currentNode.name === 'Custom' ? 'primary' : 'text_paragraph'}>\n          Custom RPC URL\n        </Text>\n      </HStack>\n      {(currentNode.name === 'Custom' || isCheckCustom) && (\n        <InputGroup mt=\"16px\" h=\"40px\" borderRadius=\"12px\" border=\"1px solid\" borderColor=\"border\">\n          <Input\n            p=\"13px 16px\"\n            fontSize={{ base: '16px', lg: '14px' }}\n            placeholder=\"Custom RPC URL\"\n            value={inputValue}\n            onChange={e => setInputValue(e.target.value)}\n          />\n          <InputRightAddon pr=\"4px\">\n            <Button\n              disabled={regTest(inputValue)}\n              fontSize=\"14px\"\n              fontWeight=\"500\"\n              h=\"32px\"\n              w=\"78px\"\n              borderRadius=\"8px\"\n              onClick={() => {\n                handleChangeNode({ name: 'Custom', link: inputValue })\n              }}\n            >\n              Save\n            </Button>\n          </InputRightAddon>\n        </InputGroup>\n      )}\n    </Box>\n  )\n}\n\nexport default RPCContent\n","import RPCContent from '../RPCContent'\nimport { RPCNodeInterface } from '../type'\nimport PCSettingItem from './Item'\n\nconst PCRPCNode = ({ showMainSetting, closeModal }: RPCNodeInterface) => {\n  return (\n    showMainSetting && (\n      <PCSettingItem icon=\"#icon-icon_rpc\" label=\"RPC Node\">\n        <RPCContent closeModal={closeModal} />\n      </PCSettingItem>\n    )\n  )\n}\n\nexport default PCRPCNode\n","import { Icon } from '@cetus/ui-kit'\nimport {\n  Box,\n  HStack,\n  Popover,\n  PopoverBody,\n  PopoverCloseButton,\n  PopoverContent,\n  PopoverHeader,\n  PopoverTrigger,\n  Text,\n  useDisclosure,\n  VStack\n} from '@chakra-ui/react'\nimport { useMemo, useState } from 'react'\nimport { SwapWidgetDisplay } from '../SwapWidgetDisplay'\nimport { SettingProps } from '../type'\nimport PCPreferred from './Preferred'\nimport PCRPCNode from './RPCNode'\ninterface PCSettings extends SettingProps {\n  isCetusPump: boolean\n}\nconst PCSettings = ({ swapWidgetDisplay, preferred, rpc }: PCSettings) => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const [title, setTitle] = useState('Settings')\n  const showMainSetting = useMemo(() => title === 'Settings', [title])\n  const handleTitleChange = (value: string) => {\n    setTitle(value)\n  }\n\n  const onBackMainSetting = () => {\n    setTitle('Settings')\n  }\n  return (\n    <Popover isLazy isOpen={isOpen} onOpen={onOpen} placement=\"bottom-end\" onClose={onClose}>\n      <PopoverTrigger>\n        <Box\n          bg=\"bg_secondary\"\n          w=\"36px\"\n          h=\"36px\"\n          p=\"7px\"\n          border=\"1px solid\"\n          borderColor=\"border\"\n          borderRadius=\"8px\"\n          cursor=\"pointer\"\n          _hover={{\n            bg: 'button_outline_hov_bg',\n            svg: {\n              fill: 'text_caption'\n            }\n          }}\n        >\n          <Icon xlinkHref=\"#icon-icon_settings1\" variant=\"gray\" />\n        </Box>\n      </PopoverTrigger>\n      <PopoverContent minW=\"360px\" p=\"0px 16px 16px\" bg=\"bg_secondary\" borderRadius=\"12px\" maxH=\"calc(100vh - 80px)\" overflowY=\"auto\">\n        <PopoverHeader p=\"0px\" fontWeight=\"500\" h=\"56px\" lineHeight=\"56px\" border=\"none\">\n          <HStack>\n            {!showMainSetting && (\n              <Icon xlinkHref=\"#icon-icon_descending\" transform=\"rotate(90deg)\" svgFill=\"text_caption\" fontSize=\"16px\" onClick={onBackMainSetting} />\n            )}\n            <Text color=\"text_caption\" fontSize=\"16px\">\n              {title}\n            </Text>\n          </HStack>\n        </PopoverHeader>\n        {!showMainSetting && <PopoverCloseButton h=\"50px\" onClick={onBackMainSetting} />}\n\n        <PopoverBody p=\"0px\">\n          <VStack>\n            {showMainSetting && swapWidgetDisplay && <SwapWidgetDisplay icon={swapWidgetDisplay.icon} h=\"42px\" />}\n            {preferred && (\n              <PCPreferred\n                onShowOptions={() => handleTitleChange('Preferred')}\n                showOptions={title === 'Preferred'}\n                showMainSetting={showMainSetting}\n                closeModal={onBackMainSetting}\n              />\n            )}\n            {rpc && <PCRPCNode showMainSetting={showMainSetting} closeModal={onClose} />}\n          </VStack>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\nexport default PCSettings\n","import Notifications from '@/components/nav/Notifications'\nimport ConnectButton from '@/components/wallet/ConnectButton'\nimport { Flex } from '@chakra-ui/react'\n\nimport PCSettings from '../settings/pc'\nimport { UserActionProps } from '../type'\n\nconst PCActions = ({ setting, notifications, isCetusPump, children }: UserActionProps) => {\n  return (\n    <Flex align=\"center\" gap=\"8px\">\n      {/* {isCetusPump && <BackButton w={{ lg: '98px', xl: '114px' }} h=\"36px\" text=\"Back to DEX\" onClick={() => jump('/')} />} */}\n      {/* {chain && <SwitchChain {...chain} />} */}\n      {children}\n      <ConnectButton isCetusPump={isCetusPump} />\n      {notifications && <Notifications />}\n      <PCSettings {...setting} isCetusPump={isCetusPump} />\n    </Flex>\n  )\n}\n\nexport default PCActions\n","import useWindowWidth from '@cetus/hooks/src/useWindowWidth'\nimport { UserActionProps } from '../type'\nimport H5Actions from './H5'\nimport PCActions from './PC'\n\nfunction UserActions(props: UserActionProps) {\n  const { isApp } = useWindowWidth()\n  return isApp ? <H5Actions {...props} /> : <PCActions {...props} />\n}\n\nexport default UserActions\n"],"file":"assets/index-MxAhhI_l.js"}